// Code generated by go-bindata.
// sources:
// assets/environment-template.yml
// assets/vpc-template.yml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEnvironmentTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xea\x2b\x90\xbb\x45\xe5\x87\x9c\xb4\xa9\x80\xec\xc2\x71\xdc\x56\xd8\x24\x35\xa2\x34\x05\x1a\x14\x05\x45\x51\x36\x51\x89\xd4\x91\x54\x52\xef\x5e\xbf\xfb\x81\xa4\x24\xeb\xe5\x34\xe9\xf6\x7a\xd8\x14\x41\x63\x72\x38\xef\xf9\xcd\x90\x76\x1c\x67\x6f\xf6\x3e\xb8\x22\x69\x96\x20\x45\x5e\x71\x91\x22\x75\x4d\x84\xa4\x9c\x79\xb0\xef\x8e\x27\x63\x67\xfc\xd2\x19\xbf\xdc\xdf\x5b\x22\x81\x52\xa2\x88\x90\xde\x1e\x80\xcf\xa4\x42\x0c\x93\xab\x4d\x46\xf4\x67\x00\xf3\x17\x04\x4a\x50\xb6\x32\x0b\xa7\x44\x62\x41\x33\x65\x58\x95\xf4\xa0\x36\x19\x01\xc5\x21\x97\x64\x58\x90\xc5\x28\x4f\x94\x07\xca\x1d\xa6\x14\x0b\xbe\x67\x8e\x52\x41\xa2\x39\xca\x10\xa6\x6a\x53\x17\x70\x91\xa7\x21\x11\xcd\x93\xfb\x93\xfd\xae\x44\x4b\x08\x3c\x06\x5a\xc8\x96\x5a\x6e\x82\x72\x86\xd7\x40\x19\x6c\x78\x2e\x60\x31\x0f\x00\x27\xb9\x54\x86\xe7\x39\xfa\x12\xd0\x3f\xc8\x37\xe5\xb9\x3d\xf2\xce\xd1\x17\x9a\xe6\x29\xb0\x3e\xb9\x6b\xa4\x00\x23\x06\x21\x29\x14\x20\xd1\x0e\x15\x7e\x27\x9b\x0b\x94\x3e\xc8\xa7\x05\xa9\xb6\x0a\x49\xc9\x31\x45\x8a\xc0\x1d\x55\x6b\xb8\xe3\xe2\x33\x11\x5b\x05\x86\x00\x67\x04\xdd\x12\x08\x13\xc4\x3e\xeb\x03\x11\x95\x28\x4c\x08\x04\xc1\x1b\x40\x18\x13\x29\x5b\xd1\xd8\xd7\x26\x5e\x67\xd8\x8f\x1e\xa2\x8a\xd1\x83\xc7\xa0\xd6\x04\x6e\x51\x92\x1b\xa5\x68\x9a\x71\xa1\x20\xe6\xc2\xac\x1b\x66\x3d\x42\x96\x79\x98\x50\x1c\xe4\x21\x23\x6a\xf6\x61\xf2\xe3\x04\xce\x3e\x4c\x40\x1a\xb6\x40\xbf\x2d\xd8\xfd\x91\x82\xdd\x47\x08\x9e\xfe\x48\xc1\xd3\x7b\x04\x9f\x13\x85\x22\xa4\x90\x96\x36\x7b\x1f\x78\xde\x3c\xe1\x79\x64\x6b\x5e\x8b\xf0\x7c\xa6\x88\x88\x11\x2e\xb2\xaf\xaa\xf8\xd7\x82\xe7\x99\xb4\x8b\x00\x0e\x9c\xa1\x90\x24\xe5\x47\xfd\x13\x95\x52\x06\x55\x9d\xcf\x39\x8b\xe9\x2a\x17\x86\xf5\xa0\xa2\x6d\xa2\x48\xf9\xe3\x34\xf0\xa4\xb1\x51\x24\x79\x63\x2d\x08\xde\xcc\x92\x84\xdf\x3d\x44\xa1\x59\xae\x38\x04\x18\x25\x94\xad\x1e\xab\x54\x0b\x86\x1a\x7b\x05\x54\x34\x1d\x65\xf4\xa8\x98\x74\x31\x72\x87\xaf\x4a\x4c\xb4\xd0\xf0\x5b\xa9\x58\x03\x0a\x9a\x47\x7f\x27\x1b\x7d\x60\x25\x10\x53\xb5\x1a\x86\x7f\xda\x02\xd7\xf9\xc0\x38\x23\xff\xaa\x78\x95\x2e\xeb\x63\x36\xf7\x4f\x2f\x21\x4c\x38\xfe\xdc\xc7\xb3\x62\xd1\x0b\xca\x4d\x4e\x05\x49\x1d\xd2\x2a\x10\x02\xcc\x73\xa6\x2a\x6e\x0d\xa8\x6d\x72\x29\x91\xf4\x5e\x2e\x73\xce\x22\xaa\xc3\x68\xdc\xfd\x06\xc9\x86\xb7\x06\xaf\x98\xe7\x5d\x70\x35\xd8\x26\xad\x59\x5a\xfc\x3b\x47\x89\x1c\x78\x70\xf3\xe4\x92\xc4\xa5\x87\x9f\xc1\xfe\xfe\x47\xcb\xa5\x05\x46\x8f\xe2\xd6\x01\xb2\x9d\x7c\xdd\xbf\xc0\xd7\xbd\x87\xef\xf4\x2f\xf0\x9d\x96\x7c\xcf\x51\x96\x51\xb6\x92\x05\x4c\x5c\x92\x15\xe5\xec\x8a\xcf\xce\x7d\xcb\x2e\x97\x0e\x41\x52\x39\x93\x92\xfb\xec\xdc\xf7\x4f\x3d\x40\x29\x75\xdc\x70\x1a\x3e\x1f\x1f\x4c\x4a\xc2\x3b\x22\x95\xe3\xf6\x10\x22\xfc\xfc\xe8\x85\x8b\x2d\x48\x91\xdc\x12\xf6\x71\x1c\x4f\xdd\xe9\x51\xf8\x62\x6c\x76\x50\xe6\x30\x2e\xd4\x7a\xa7\xfc\x38\x74\xe3\x89\xfb\xf2\xb0\xa4\x96\x3c\x2f\xa8\xfb\x94\x38\x98\x1e\x1e\xbc\x98\xb8\xe3\x86\xb6\x7d\x6c\xc3\x98\x8c\x5f\x1e\x46\x71\x97\x6d\x1f\x35\x7e\x71\x14\x1f\x4c\xd1\x41\x69\x1b\x26\x4c\x09\x94\xf4\xd2\x92\x09\x79\x1e\x1f\x1d\x45\x7b\x97\x44\xf2\x5c\x60\x62\xdc\xbe\xc0\x72\x6e\x13\xbf\xde\x19\x0c\x66\x2f\xe6\x06\xb8\xcb\x71\x61\x31\x0f\x34\xc2\x15\x00\x67\x80\xba\x73\xa4\x46\xd0\xf8\x60\xa8\x8b\x2e\x91\x11\x16\xc9\xb7\xcc\x83\x9b\x8f\x16\xd2\x04\xcf\x88\x50\x94\x54\x68\x76\xbd\x9c\x7f\xe0\x8c\xf8\x11\x61\x8a\xc6\xb4\x54\x4d\x27\xd7\xab\x0b\xcf\xf3\xe3\x6d\x29\x3b\x3d\x95\x54\xdb\x7c\xe2\x9b\xae\x75\x6d\x9a\x58\x5f\xe5\xd4\x69\xf5\xb6\xb1\xe2\x82\x9b\x03\x8f\x11\xea\x3e\x42\xa8\xfb\xa3\x84\x4e\x1f\x21\x74\xfa\x00\xa1\x67\xa6\x29\x34\x3a\x97\xc1\x39\x7b\x60\xce\x99\x42\x94\x11\x51\x36\x13\x59\xe2\x2b\x65\x06\x5f\xab\xe1\x78\x0b\xb9\xf6\x64\xbd\x81\x75\xc1\xdd\xd2\xf4\x35\xc0\xb9\x20\x46\x89\x25\x4f\x28\xae\xba\x40\x99\xbe\x01\x5d\x31\x54\x6b\xc5\x57\x34\x25\x3c\x57\x1e\x2c\xaf\x26\x87\xe7\x66\xf9\x5d\x16\x21\x45\x9a\xc7\x6b\x59\x79\xc9\x13\xfd\x9f\xa5\xda\x32\x3a\xa7\xac\x32\xd1\x67\x01\x11\xb7\x14\x37\xac\x33\xf6\x9d\x20\x85\xd7\x6d\xbb\x75\x83\xce\x25\xd1\xaa\xd4\xf5\xd0\x3f\xef\x11\x55\x6f\x59\x53\x79\xe9\xc1\xbe\x12\x39\xd1\xc7\xbb\xee\xbd\xbf\xba\x7a\x82\x65\xe8\xeb\xa3\x97\xb1\xb7\x7f\xfc\xa2\x6a\x6b\x30\x36\x4c\xea\x03\x09\xe6\x69\x8a\x58\xd4\x18\x52\x00\xc6\x93\x4f\x28\x8a\x3e\x95\x0d\xf2\x93\xe2\x9f\x70\x1d\x3b\x3a\xe7\x3d\x78\x12\xe4\x21\xfc\xa7\xb5\x0b\xf0\x8f\x27\xa3\x90\xb2\x51\x88\xe4\xba\xb3\x47\xf0\x9a\x6b\xb0\xf9\x34\x3f\x7b\x17\x5c\x2d\x2e\x8f\x9f\xfe\xb9\x05\xa9\xaf\x00\xbf\xfe\x0a\x23\xa2\xf0\x88\x60\xa9\x7f\x87\x56\xfb\x1a\x9b\x98\x26\xa4\xa5\xf9\xc0\x9c\xc0\x31\xd3\xbf\xce\x3a\xcf\xcc\xa9\x41\x57\x6d\xa6\x08\x53\x3b\xd5\xbe\x49\x11\x65\x1f\x3b\xcb\x52\x21\xfc\xf9\xf8\xe9\x9f\xc6\xd5\x81\xfe\xe0\x47\x5f\x3b\x54\xc2\x74\xb7\x92\xcc\xf6\xba\x36\x55\xca\x23\x9d\x4f\xe3\xf1\xf8\x60\x3c\xde\x6f\x6d\xf2\x3b\x46\x84\x07\x82\x73\xd5\xda\x59\x19\x30\xee\xee\x6c\xcd\x5e\x73\xfe\x59\x0e\x23\x63\x3e\xca\x15\x77\x04\x49\x38\x8a\x88\xf8\x4e\x47\x74\xf8\x38\x5a\x42\xd7\x35\x4a\xd0\xd5\x8a\x08\x79\x9c\x71\xa9\x86\xb9\xa9\xb4\x0e\x51\x86\xd4\xfa\xb8\xea\x4a\xc3\x6e\x25\x0c\xcb\xa4\x1e\xee\xcc\xe6\x0e\x53\x84\xf5\xe6\xf1\x88\x67\x6a\x84\xee\xa4\xc9\x37\xad\x35\x65\x54\x81\x73\x0b\x8e\x63\xc2\x06\xf5\xb0\x69\xb4\xfb\x0a\x8e\x23\x0a\x5d\x7a\x8a\xd2\xec\xea\xd0\xc1\xbd\x81\x04\x10\x39\x43\xf2\xb8\x15\x12\x69\xc1\xa4\x95\x9d\x72\x23\x6f\x69\xa3\x22\x8b\x28\xd8\x5c\x6d\x2f\x03\x10\xa6\x6f\xd4\x51\x0d\x3d\xda\xfb\x32\x17\xe4\x32\x67\x4c\x43\xc5\x2e\xaa\x9e\x3a\x01\x3b\xc1\xf5\x57\xcb\xbd\x94\xdf\x48\xb0\x1d\x9d\xde\x4f\xd1\x8a\xf8\x1a\x27\x5e\x51\x16\xf9\xec\x1c\x65\x70\xd3\x1a\x05\x9f\xd9\x06\x31\xa8\x79\x7b\xf0\xcc\x0e\x36\x50\x26\x5c\x40\x70\x2e\xa8\xda\x14\xd7\x47\xb8\xb1\x67\xde\x70\xa9\x82\xd7\x15\x55\xe3\x96\x64\x29\x7a\x2e\x83\x3e\x4a\xcb\xd5\xa5\xe0\xda\x49\x05\xed\x62\xee\xb6\x36\x5a\xb7\x27\x78\xe2\xc7\x70\x53\xbb\x21\x14\xaa\x37\x3f\x0d\xea\x9d\x77\x50\xea\xf6\x4e\x12\x71\x5a\x83\x6d\x00\x3d\x46\x9f\x20\x49\x9e\x1f\xd4\x63\xd4\x53\x90\x35\x30\x05\xe7\x4b\xb3\xbc\x36\x79\x6a\x2f\x34\x49\x02\xce\x06\xd0\x9d\x74\x74\x84\x42\xce\x95\x54\x02\x65\x0d\xe2\xff\x4b\xad\x74\x84\x4a\xd3\x1a\xc1\x21\xf0\xf4\xb7\x87\x49\xee\x99\x4c\xef\x11\xdd\x0d\x63\xa7\xd1\xfa\xb3\x73\x8d\x2a\xdd\x58\x77\x33\x78\x89\xd4\xda\x83\xc1\xa8\xac\x8e\x4b\x5e\x2b\x2a\xa7\x4a\x1c\xbd\x6c\x65\xeb\xbf\xfa\x05\x16\x34\x7d\x52\x66\x52\xe6\x29\xd1\x04\x76\x98\x39\xe5\x38\x4f\x35\x40\x57\xae\x0c\x14\x52\xa4\xb9\xe4\xc0\x22\x8e\x09\x56\x1e\xd4\x9f\x30\xac\x00\xca\x30\xcd\x50\xd2\xac\xfe\x72\xd4\xd9\x6b\x16\x39\xc1\xee\x10\xa5\xe8\x0f\xce\xd0\x9d\x6e\xb7\x69\x6d\x7f\x66\x50\xb6\xf9\x96\x21\x95\xf4\xb6\x0a\xef\xf0\x93\xb1\x83\xd6\x5d\x65\x2d\xb3\x85\x44\xb0\x74\x0a\xac\xdc\x4e\x56\x3b\x2c\xef\xb5\xfd\x3e\xeb\xfb\xb4\xb6\x76\x4a\xcf\x8c\x9c\x64\x7b\xe9\x69\xef\xeb\x34\xd2\x5b\x9d\x64\xef\xa1\x3d\x25\xe2\x31\xd4\x54\x62\x7e\x4b\xc4\x92\x27\xc9\x82\x45\x19\xa7\x4c\xf5\x90\x05\x79\x98\x52\xf5\x4b\x67\x47\x78\xdd\x35\xe9\x69\x66\x8d\xe5\xb2\xcb\x7a\x30\xf8\x45\x87\xc2\x22\x64\xcf\xd5\xcf\xf5\xbc\x06\xa8\xee\xba\xaa\x99\x67\x5b\x9b\xe6\xd7\xcb\x79\xb1\x6a\x4e\x34\x9e\x14\x17\xf3\xc0\xc8\xaa\x90\x1a\xb6\x5c\x5b\xf0\xed\xb3\x95\x20\xb2\x96\x18\x7e\xb6\x14\x5c\x71\xcc\x13\x0f\x14\xde\x42\xd6\x2b\xc1\xd3\x25\x17\xe6\x95\xdc\xdd\xb6\xb7\x2b\xde\xb3\x38\xa7\x91\xf0\xb3\x42\xd1\xda\xa3\xde\x22\x09\x7f\x8a\xf9\x67\x27\xff\x23\xcb\x8f\xc6\x3d\x96\xd7\x17\x4b\xcb\xc7\x43\xf3\x6f\x34\xd6\x56\x9f\x9d\xb8\x3a\x1a\x97\x79\x0f\x16\x75\x8d\x2f\xf4\xda\xd5\xc3\x7b\x95\xac\xa9\x58\x29\x53\xe9\xf7\xfc\xf0\x70\x7a\x58\xae\x06\xf6\x42\xd4\x10\xa8\x7d\xfa\x9a\xa8\x99\x52\x36\x42\xc3\x62\xb9\xee\xe0\x3a\x91\x4d\xe3\x1a\x95\x5e\x70\x17\x67\x27\x7f\x07\x0b\x3b\xca\xf7\x9a\xd8\xf6\xc3\x02\xcb\x45\x12\x76\x6d\x4b\x90\x54\x14\x9f\x71\x14\x9d\xa0\x04\x31\x4c\xd9\xea\xda\xf5\xbc\xed\x42\x81\x6b\x5d\x33\xed\x53\x81\xfc\xfe\xc7\x96\x9f\xf5\xbe\xf2\xb3\x9e\x54\xbe\xef\x15\xa5\x35\x8b\xb6\x46\x01\x1d\xc5\x2a\x7a\x67\xba\x3b\xb0\xbe\xa7\xb7\x5d\x51\x2c\x0e\xec\x88\x60\x3d\xc8\x33\xc1\xca\xb9\xd5\xc8\x2a\x48\x8a\x6f\x69\x6c\x07\xac\x69\x67\x85\xc7\x5c\xdc\x21\x11\x6d\x11\x05\x89\x15\x51\xc6\x92\x36\xbf\x82\x51\x8d\xa2\xea\xec\x2d\x0c\xda\x16\xcf\x9b\xab\xab\x65\x65\x7c\x97\xc1\x83\xdd\xd0\x16\xda\x33\x96\x95\x4a\xdc\xa3\x06\xf4\x00\xf8\xdb\x5c\x65\xb9\xad\x01\x3d\x7b\xbf\x13\xc5\x88\x64\x02\x5c\x5c\x87\xd7\x4a\x65\xde\x68\x64\x9e\x25\x16\x49\x38\x3c\xbd\x08\xcc\x48\x3a\xda\x83\xf6\x37\x69\x1a\xf7\xdf\x5d\x9e\x75\x02\xae\x9d\xd9\xe0\xbb\xf5\x6b\x23\xc4\x0d\x66\x33\xc1\xca\x6f\xe5\x34\xdf\x92\xd0\x7e\x9b\xba\xf8\x92\x69\x93\x0b\xb3\x8a\xeb\x88\xd6\xb6\x33\x39\x3b\x1d\x55\x7a\x9e\x81\x5b\x7a\xd5\x07\xa2\x9d\x5f\x15\xd6\xbe\x44\xf9\x1e\x9d\x4a\x19\x7b\xff\x0d\x00\x00\xff\xff\x23\xcd\x84\x66\x2a\x20\x00\x00")

func assetsEnvironmentTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsEnvironmentTemplateYml,
		"assets/environment-template.yml",
	)
}

func assetsEnvironmentTemplateYml() (*asset, error) {
	bytes, err := assetsEnvironmentTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/environment-template.yml", size: 8234, mode: os.FileMode(420), modTime: time.Unix(1484068831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsVpcTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x98\x4b\x6f\xdb\x38\x10\xc7\xef\xf9\x14\x93\x60\x01\x6d\x81\x38\xb1\xa5\xa4\x68\x78\xf3\x3a\x4e\x63\x6c\x9b\x18\x96\xe1\x02\x69\xf6\x40\x4b\xe3\x58\xa8\x44\x6a\x49\x2a\x0f\x14\xf9\xee\x0b\x51\x92\x1f\xb4\xe4\xfa\x99\x4d\xe1\x8b\x45\x0e\x39\xf3\xff\x69\xc8\xa1\x58\xab\xd5\x0e\x9a\xdf\xdc\x3e\x46\x71\x48\x15\x5e\x71\x11\x51\x35\x40\x21\x03\xce\x08\x58\x76\xbd\x51\xaf\xd5\x2f\x6a\xf5\x0b\xeb\xa0\x4b\x05\x8d\x50\xa1\x90\xe4\x00\xa0\xc3\xa4\xa2\xcc\xc3\x3e\x32\xca\xbc\x97\xb4\x09\xe0\x12\xa5\x27\x82\x58\xe9\xc1\x85\x05\xa8\xcc\x04\x14\x87\x44\x22\x8c\xb8\x80\x41\xb7\xa5\x07\xf4\x5f\x62\x24\xe0\x2a\x11\xb0\x07\xdd\xd0\x0c\x43\xfe\x84\xfe\x80\x86\x09\xca\x6c\xd2\x1a\xf8\x38\xa2\x49\xa8\x26\x4f\x7e\xe0\x51\x85\x7e\xee\x52\xf7\x91\x19\x23\x57\x8e\xf5\x34\x25\x31\xb9\xc9\x90\xa1\x82\x91\xe0\x11\x3c\x8d\x03\x6f\x9c\x06\x45\x53\x63\x70\xdd\x6b\xa0\x9e\x87\x52\x9e\x94\x87\xf6\x35\x60\x5f\x90\x3d\xa8\x31\x01\xeb\xc2\xca\x9a\xe8\xf3\xa4\xa9\xf1\xc9\x9a\x0f\xa8\x7e\xa2\x7f\xa7\xf5\x59\x61\x5d\xaa\x14\x0a\x46\xe0\xe8\xcf\xfb\x7b\xff\x67\xe3\xd8\x79\xfd\x70\x7f\x7f\xb2\xca\xc3\x69\xfe\xd7\x7e\xfd\x70\xa4\xa7\x6c\x71\x26\x95\xa0\x01\x53\x73\x1a\xad\x28\x91\x0a\x86\x08\x14\x1e\x69\x18\xf8\xd0\xea\x5c\xf6\x60\x18\x72\xef\x07\x81\xe7\x13\xfd\x3b\x7d\x3e\x49\xa3\x1d\xc4\x5e\x2b\xf0\xc5\x5f\xba\xaf\x92\x96\x1e\xba\xfc\xb5\xad\xcb\xa6\x51\xc0\x69\x7c\x7c\xbf\x74\xba\xc9\x30\x0c\xbc\x0c\x42\xf3\xae\xb1\x16\xa9\xe6\x5d\x63\xc7\xa4\xec\xb3\xdf\x85\x94\xbd\x26\x29\x7b\x87\xa4\x1a\xbf\x15\x29\x67\x4d\x52\xce\x0e\x49\xd9\xef\x9a\x54\x8b\x33\x3f\x48\xc7\xe8\x22\x70\x4d\xa5\xb1\x18\x33\x5e\x47\x57\x8c\x90\x1b\xae\x8e\xb2\xc7\xb4\x3a\xe8\xa6\xf6\xbf\x09\x0d\xe5\x11\x81\xef\x87\x3d\x1c\x55\x2e\xe4\x63\xb0\xac\x7f\xca\xa6\xb7\xb7\x98\xde\xfe\xf5\xf4\xce\x16\xd3\x3b\xc6\xf4\x3d\x94\x3c\x11\x5e\x56\x2c\x07\xdd\x16\x99\x49\x91\xe6\x37\x97\x90\x76\xcb\x26\xa4\xd8\xb8\xbb\x82\xc7\x28\x54\x50\xd4\x56\x80\x69\x06\x82\xf6\x36\x5b\x12\x72\x93\x36\xa3\xc3\x10\x2f\x99\x74\x93\x38\xe6\x42\x11\xb0\x94\x48\xd0\x32\xbb\xaf\xb9\x54\x8c\x46\x28\x0d\x03\xf3\xa8\x90\x39\x32\x5a\x17\xf7\xdb\x72\x25\x59\x77\x91\x63\x59\x8e\x90\x92\x04\xa9\x90\x3b\x88\xbd\x8e\x5f\x48\xcd\xa1\x2c\x42\xa8\x4a\x98\xdc\xfc\x2b\x8d\x33\x8b\x4e\x7c\xcb\xbe\xd0\x84\x79\x63\x02\xa9\xe2\xbc\xbf\xf9\x48\x83\x90\x0e\x83\x30\x50\x2f\x77\x9c\x21\x81\x43\x17\x43\xf4\x14\x7c\x87\xfa\x31\x1c\x7e\x4e\x67\x95\x79\x76\x68\x91\xf4\x41\x4e\x93\xe0\x6f\x7c\x21\x70\x83\xea\x89\x8b\xc2\x23\x80\x3e\x11\x91\x3c\xb2\xc5\x2d\x77\x2b\x58\xf6\x0e\x61\xd9\xbb\x84\xd5\xd8\x0b\x2c\x67\x2b\x58\xce\x0e\x61\x39\xbb\x84\x65\xef\x08\x56\x87\xa5\x55\x00\xd5\x67\xaa\xf0\x89\xbe\x94\xc3\x32\x8c\x2a\x98\x6c\xe0\x7d\xd0\x6d\xad\x14\xc0\xa0\xdb\xca\xfb\x9b\x4a\x51\x6f\x1c\x21\x53\x6b\xbd\x19\xc3\xcb\xc4\x62\x51\x59\x16\x5b\x8f\x27\x0a\xfb\xe9\x56\x57\x1e\xd0\xb4\x7f\xad\x30\x36\xce\x66\xed\x6f\x49\x28\x79\xc9\x8f\x91\xf9\xf2\x96\x91\x12\xb0\x15\x71\x4e\x85\x4c\xc2\x35\x09\xe4\x96\x97\x28\x55\xc0\x68\xba\x50\x66\xf2\x7c\xfe\xbb\x07\x60\x55\xc0\x93\xed\x76\xea\xa7\x29\x25\xf7\x02\xed\x60\xd9\x9a\x2d\x1d\xb0\x71\x89\xc8\xfa\x0d\xed\xf3\x83\x56\x85\x64\x6c\x8d\x6f\x24\xac\x6a\x3b\x5f\x2a\xcc\xde\x42\x98\xf3\x46\xc2\xaa\xb6\xde\xa5\xc2\x9c\x0d\x84\xe5\x2b\xb0\xe9\x85\xe5\x22\xa6\xfd\xfb\x5e\xeb\x1d\x36\xe4\x09\xf3\xdb\xf1\x18\x23\x14\x34\xec\x72\xa1\xcc\x18\xdb\x4c\x89\x8a\x5d\xd2\x30\xaa\x88\x76\x6a\x65\xa0\x31\x74\x02\xf4\x92\x10\x6f\x92\x68\x88\x22\xfd\xae\xa8\x3b\xc5\x11\xaf\x2b\xb8\xe2\x1e\x0f\x09\x58\x1f\xad\x19\xdb\xa6\x97\xbd\x4a\x7d\xc5\x52\x9c\x17\x1f\x04\xca\xf4\x8c\x38\xa2\xa1\x9c\x1c\x12\x97\x6c\x20\xa9\xe6\x1e\x65\x0f\x48\x26\x98\xae\x04\x8f\x74\x04\xf6\x99\x35\x69\xec\xf3\xd4\xfd\xf9\xb9\x73\x6e\x4d\xc9\xb9\xee\xf5\xfb\xe1\x75\xb6\x17\x5e\x3a\x80\xe2\xd2\xeb\x97\xcc\x6c\xdb\x20\x96\x35\xe4\xb8\xae\x95\x8a\xdf\x0f\xaf\xf3\xff\x39\xbf\x3e\xd5\x0d\x56\x59\xc3\x6d\xa2\x34\xac\xf7\x03\xaa\xbe\x15\xa8\xd9\x8f\xb5\x8d\x38\x99\x98\x26\x8b\xd0\x28\x9e\xa6\x98\x15\xab\x45\xe9\x80\xfd\xd6\xf7\xd5\xde\x84\x51\x42\xdf\x54\xde\x56\x55\x7e\x13\x79\xce\x9b\xca\xdb\xaa\xd6\xaf\x22\xef\x36\x51\x71\xa2\xb2\x6b\x13\x5d\xad\xf3\x03\xf3\xcc\x6d\x55\x7f\x8c\x10\xf8\xc0\x47\xa0\xc6\x08\x8f\xb1\xa7\x4d\xf2\x12\x3d\x57\xdb\xdb\xcf\xfa\x62\xa4\x70\x4f\x23\xfd\x65\x96\x0c\xe1\x8f\x9f\x1a\x87\xab\xa8\xf7\x23\x6d\x7e\xad\x69\x67\x8b\x4b\xa3\x32\x80\x58\xdb\x81\xd4\x86\x81\x3f\x77\xbb\x9c\x85\x92\x7b\xbd\x62\x84\x74\x46\xd3\xf3\x45\xc5\x82\x48\xbb\x96\x24\x7e\xde\xa9\xa3\xbe\xe1\xda\xc1\xba\x0a\x17\x94\x2d\xae\x94\x35\xd5\xda\x1b\xa8\xb5\x97\xa9\xb5\xf7\xa5\xd6\x2e\x51\xeb\xac\xa9\xd6\xd9\x40\xad\xb3\x4c\xad\xb3\x2f\xb5\x4e\xc7\x3f\xf8\x2f\x00\x00\xff\xff\x28\xeb\x52\x31\x42\x1c\x00\x00")

func assetsVpcTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsVpcTemplateYml,
		"assets/vpc-template.yml",
	)
}

func assetsVpcTemplateYml() (*asset, error) {
	bytes, err := assetsVpcTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/vpc-template.yml", size: 7234, mode: os.FileMode(420), modTime: time.Unix(1484088279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/environment-template.yml": assetsEnvironmentTemplateYml,
	"assets/vpc-template.yml": assetsVpcTemplateYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"environment-template.yml": &bintree{assetsEnvironmentTemplateYml, map[string]*bintree{}},
		"vpc-template.yml": &bintree{assetsVpcTemplateYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

