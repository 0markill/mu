// Code generated by go-bindata.
// sources:
// assets/environment-template.yml
// assets/vpc-template.yml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEnvironmentTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\xfb\x6f\xdb\x38\xf2\xff\x3d\x7f\xc5\xd4\xdf\x02\xf9\xde\xa2\xf2\x43\x4e\xda\x54\x40\x76\xe1\x38\x6e\x2b\x6c\xd2\x1a\x51\x9a\x02\x0d\x82\x82\xa2\x28\x9b\x88\x44\xea\x48\x2a\x69\x76\xaf\xff\xfb\x81\xd4\xc3\x7a\xd0\xde\xa4\x9b\xc3\xe1\x52\x04\x8d\xc9\xe1\xbc\xe7\x33\x43\xda\x71\x9c\xbd\xd9\x97\xe0\x92\xa4\x59\x82\x14\x79\xc7\x45\x8a\xd4\x15\x11\x92\x72\xe6\xc1\xbe\x3b\x9e\x8c\x9d\xf1\x5b\x67\xfc\x76\x7f\x6f\x89\x04\x4a\x89\x22\x42\x7a\x7b\x00\x3e\x93\x0a\x31\x4c\x2e\x1f\x32\xa2\x3f\x03\x98\xbf\x20\x50\x82\xb2\x95\x59\x38\x25\x12\x0b\x9a\x29\xc3\xaa\xa2\x07\xf5\x90\x11\x50\x1c\x72\x49\x86\x25\x59\x8c\xf2\x44\x79\xa0\xdc\x61\x4a\xb1\xe0\x7b\xe6\x28\x15\x24\x9a\xa3\x0c\x61\xaa\x1e\x9a\x02\x3e\xe6\x69\x48\x44\xfb\xe4\xfe\x64\xbf\x2f\xb1\x20\x04\x1e\x03\x2d\x65\x4b\x2d\x37\x41\x39\xc3\x6b\xa0\x0c\x1e\x78\x2e\x60\x31\x0f\x00\x27\xb9\x54\x86\xe7\x39\xfa\x1e\xd0\x3f\xc8\x5f\xca\x73\x2d\xf2\xce\xd1\x77\x9a\xe6\x29\x30\x9b\xdc\x35\x52\x80\x11\x83\x90\x94\x0a\x90\x68\x8b\x0a\xbf\x93\x87\x8f\x28\x7d\x94\x4f\x4b\x52\x6d\x15\x92\x92\x63\x8a\x14\x81\x7b\xaa\xd6\x70\xcf\xc5\x2d\x11\x1b\x05\x86\x00\x67\x04\xdd\x11\x08\x13\xc4\x6e\xf5\x81\x88\x4a\x14\x26\x04\x82\xe0\x03\x20\x8c\x89\x94\x9d\x68\xec\x6b\x13\xaf\x32\xec\x47\x8f\x51\xc5\xe8\xc1\x63\x50\x6b\x02\x77\x28\xc9\x8d\x52\x34\xcd\xb8\x50\x10\x73\x61\xd6\x0d\xb3\x3d\x80\x65\x1e\x26\x14\x07\x79\xc8\x88\x9a\x7d\x9d\x3c\x9f\x80\xd9\xd7\x09\x48\xc3\x16\x68\x5f\x90\xfb\x9c\x82\xdc\x96\xa0\xae\xdb\xda\x82\xa7\xcf\x29\x78\xba\x43\xf0\x39\x51\x28\x42\x0a\x69\x69\xb3\x2f\x81\xe7\xcd\x13\x9e\x47\x45\x4d\x6b\x11\x9e\xcf\x14\x11\x31\xc2\x65\x76\xd5\x15\xfd\x5e\xf0\x3c\x93\xc5\x22\x80\x03\x67\x28\x24\x49\xf5\x51\xff\x44\x95\x94\x41\x5d\xc7\x73\xce\x62\xba\xca\x85\x61\x3d\xa8\x69\xdb\x28\x51\xfd\x38\x2d\xbc\x68\x6d\x94\x49\xdc\x5a\x0b\x82\x0f\xb3\x24\xe1\xf7\x8f\x51\x68\x96\x2b\x0e\x01\x46\x09\x65\xab\xa7\x2a\xd5\x81\x99\xd6\x5e\x09\x05\x6d\x47\x19\x3d\x6a\x26\x7d\x0c\xdc\xe2\xab\x0a\xf3\x8a\xd2\xff\xad\x52\xac\x55\xea\xed\xa3\xbf\x93\x07\x7d\x60\x25\x10\x53\x8d\x1a\x85\xff\x2f\x0a\x58\xe7\x03\xe3\x8c\xfc\xa3\xe6\x55\xb9\xcc\xc6\x6c\xee\x9f\x5e\x40\x98\x70\x7c\x6b\xe3\x59\xb3\xb0\x82\x6e\x9b\x53\x49\xd2\x84\xac\x1a\x64\x00\xf3\x9c\xa9\x9a\x5b\x0b\x4a\xdb\x5c\x2a\xa4\xdc\xc9\x65\xce\x59\x44\x75\x18\x8d\xbb\x3f\x20\xd9\xf2\xd6\xe0\x1d\xf3\xbc\x8f\x5c\x0d\x36\x49\x6b\x96\x16\xff\xcc\x51\x22\x07\x1e\x5c\xbf\xb8\x20\x71\xe5\xe1\x57\xb0\xbf\x7f\x53\x70\xe9\x80\xcf\x93\xb8\xf5\x80\x6b\x2b\x5f\xf7\x6f\xf0\x75\x77\xf0\x9d\xfe\x0d\xbe\xd3\x8a\xef\x39\xca\x32\xca\x56\xb2\x84\x89\x0b\xb2\xa2\x9c\x5d\xf2\xd9\xb9\x5f\xb0\xcb\xa5\x43\x90\x54\xce\xa4\xe2\x3e\x3b\xf7\xfd\x53\x0f\x50\x4a\x1d\x37\x9c\x86\xaf\xc7\x07\x93\x8a\xf0\x9e\x48\xe5\xb8\x16\x42\x84\x5f\x1f\xbd\x71\x71\x01\x52\x24\x2f\x08\x6d\x1c\xc7\x53\x77\x7a\x14\xbe\x19\x9b\x1d\x94\x39\x8c\x0b\xb5\xde\x2a\x3f\x0e\xdd\x78\xe2\xbe\x3d\xac\xa8\x25\xcf\x4b\x6a\x9b\x12\x07\xd3\xc3\x83\x37\x13\x77\xdc\xd2\xd6\xc6\x36\x8c\xc9\xf8\xed\x61\x14\xf7\xd9\xda\xa8\xf1\x9b\xa3\xf8\x60\x8a\x0e\x2a\xdb\x30\x61\x4a\xa0\xc4\x4a\x4b\x26\xe4\x75\x7c\x74\x14\xed\x5d\x10\xc9\x73\x81\x89\x71\xfb\x02\xcb\x79\x91\xf8\xcd\xce\x60\x30\x7b\x31\x37\xc0\x5d\x8d\x03\x8b\x79\xa0\x11\xae\x04\x38\x03\xd4\xbd\x23\x0d\x82\xd6\x07\x43\x5d\x76\x89\x8c\xb0\x48\x7e\x62\x1e\x5c\xdf\x14\x90\x26\x78\x46\x84\xa2\xa4\x46\xb3\xab\xe5\xfc\x2b\x67\xc4\x8f\x08\x53\x34\xa6\x95\x6a\x3a\xb9\x74\x6e\xf9\xf1\xa6\x94\x1d\x4b\x25\x35\x36\x5f\xf8\xa6\x6b\x5d\x99\x26\x66\x2d\x9d\x9b\x26\xb5\xde\x37\x76\x7c\xe4\xe6\xc8\x53\xc4\xba\x5b\xc5\xde\xd8\x4a\xeb\xd9\xe4\x4e\x9f\x62\xee\xf4\x31\x62\xcf\x4c\x6f\x68\x35\x30\x03\x77\xc5\x81\x39\x67\x0a\x51\x46\x44\xd5\x53\x64\x05\xb3\x94\x19\x98\xad\x67\xe0\x0d\xf2\x16\x27\x9b\x7d\xac\x8f\xf1\x05\x8d\xad\x0f\xce\x05\x31\x4a\x2c\x79\x42\x71\xdd\x0c\xaa\x2c\x0e\xe8\x8a\xa1\x46\x47\xbe\xa4\x29\xe1\xb9\xf2\x60\x79\x39\x39\x3c\x37\xcb\x9f\xb3\x08\x29\xd2\x3e\xde\x48\xce\x0b\x9e\xe8\xff\x0a\xaa\x0d\xa3\x73\xca\x6a\x13\x7d\x16\x10\x71\x47\x71\xcb\x3a\x63\xdf\x09\x52\x78\xdd\xb5\x5b\xf7\xe9\x5c\x12\xad\x4a\x53\x0f\xfd\xf3\x05\x51\xf5\x89\xb5\x95\x97\x1e\xec\x2b\x91\x13\x7d\xbc\xef\xde\xdd\x45\x66\x09\x96\xa1\x6f\x4e\x60\xc6\x5e\xfb\x14\x46\xd5\xc6\x60\x6c\x98\x34\xe7\x12\xcc\xd3\x14\xb1\xa8\x35\xab\x00\x8c\x27\xdf\x50\x14\x7d\xab\xfa\xe4\x37\xc5\xbf\xe1\x26\x84\xf4\xce\x7b\xf0\x22\xc8\x43\xf8\x57\x67\x17\xe0\xff\x5e\x8c\x42\xca\x46\x21\x92\xeb\xde\x1e\xc1\x6b\xae\x31\xe7\xdb\xfc\xec\x73\x70\xb9\xb8\x38\x7e\xf9\xe7\x06\xab\x7e\x00\xfc\xfa\x2b\x8c\x88\xc2\x23\x82\xa5\xfe\x1d\x16\xda\x37\xd8\xc4\x34\x21\x1d\xcd\x07\xe6\x04\x8e\x99\xfe\x75\xd6\x79\x66\x4e\x0d\xfa\x6a\x33\x45\x98\xda\xaa\xf6\x75\x8a\x28\xbb\xe9\x2d\x4b\x85\xf0\xed\xf1\xcb\x3f\x8d\xab\x03\xfd\xc1\x8f\x7e\xf4\xa8\x84\x69\x72\x15\x59\xd1\xf2\xba\x54\x29\x8f\x74\x3e\x8d\xc7\xe3\x83\xf1\x78\xbf\xb3\xc9\xef\x19\x11\x1e\x08\xce\x55\x67\x67\x65\x30\xb9\xbf\xb3\x31\x7b\xcd\xf9\xad\x1c\x46\xc6\x7c\x94\x2b\xee\x08\x92\x70\x14\x11\xf1\x93\x8e\xe8\xf1\x71\xb4\x84\xbe\x6b\x94\xa0\xab\x15\x11\xf2\x38\xe3\x52\x0d\x73\x53\x69\x3d\xa2\x0c\xa9\xf5\x71\xdd\x9c\x86\xfd\x4a\x18\x56\x49\x3d\xdc\x9a\xcd\x3d\xa6\x08\xeb\xcd\xe3\x11\xcf\xd4\x08\xdd\x4b\x93\x6f\x5a\x6b\xca\xa8\x02\xe7\x0e\x1c\xc7\x84\x0d\x9a\x61\xd3\x68\xf7\x03\x1c\x47\x94\xba\x58\x8a\xd2\xec\xea\xd0\xc1\xce\x40\x02\x88\x9c\x21\x79\xdc\x09\x89\x2c\xc0\xa4\x93\x9d\xf2\x41\xde\xd1\x56\x45\x96\x51\x28\x72\xb5\xbb\x0c\x40\x98\xbe\x38\x47\x0d\xf4\xe8\xee\xcb\x5c\x90\x8b\x9c\x31\x0d\x15\xdb\xa8\x2c\x75\x02\xc5\x20\x67\xaf\x96\x9d\x94\x7f\x91\x60\x5b\x1a\xbe\x9f\xa2\x15\xf1\x35\x4e\xbc\xa3\x2c\xf2\xd9\x39\xca\xe0\xba\x33\x11\xbe\x2a\x1a\xc4\xa0\xe1\xed\xc1\xab\x62\xbe\x81\x2a\xe1\x02\x82\x73\x41\xd5\x43\x79\x8b\x84\xeb\xe2\xcc\x07\x2e\x55\xf0\xbe\xa6\x6a\x5d\x96\x0a\x0a\xcb\x9d\xd0\x47\x69\xb5\xba\x14\x5c\x3b\xa9\xa4\x5d\xcc\xdd\xce\x46\xe7\x12\x05\x2f\xfc\x18\xae\x1b\x17\x85\x52\xf5\xf6\xa7\x41\xb3\xf3\x0e\x2a\xdd\x3e\x4b\x22\x4e\x1b\xb0\x0d\x66\x04\x38\x41\x92\xbc\x3e\x68\xc6\xc8\x52\x90\x0d\x30\x05\xe7\x7b\xbb\xbc\x1e\xf2\xb4\xb8\xd7\x24\x09\x38\x0f\x80\xee\xa5\xa3\x23\x14\x72\xae\xa4\x12\x28\x6b\x11\xff\x57\x6a\xa5\x27\x54\x9a\xd6\x08\x0e\x81\x97\xbf\x3d\x4e\xb2\x65\x40\xdd\x21\xba\x1f\xc6\x5e\xa3\xf5\x67\xe7\x1a\x55\xfa\xb1\xee\x67\xf0\x12\xa9\xb5\x07\x83\x51\x55\x1d\x17\xbc\x51\x54\x4e\x9d\x38\x7a\xb9\x90\xad\xff\xb2\x0b\x2c\x69\x6c\x52\x66\x52\xe6\x29\xd1\x04\xc5\x30\x73\xca\x71\x9e\x6a\x80\xae\x5d\x19\x28\xa4\x48\x7b\xc9\x81\x45\x1c\x13\xac\x3c\x68\xbe\x64\x14\x02\x28\xc3\x34\x43\x49\xbb\xfa\xab\x51\x67\xaf\x5d\xe4\x04\xbb\x43\x94\xa2\x3f\x38\x43\xf7\xba\xdd\xa6\x8d\xfd\x99\x41\xd9\xf6\x93\x86\x54\xd2\xdb\x28\xbc\xc5\x4f\xc6\x0e\xda\x74\x55\x61\x59\x51\x48\x04\x4b\xa7\xc4\xca\xcd\x64\xb5\xc5\x72\xab\xed\xbb\xac\xb7\x69\x5d\xd8\x29\x3d\x33\x72\x92\xcd\xdd\xa7\xbb\xaf\xd3\x48\x6f\xf5\x92\xdd\x42\x7b\x4a\xc4\x53\xa8\xa9\xc4\xfc\x8e\x88\x25\x4f\x92\x05\x8b\x32\x4e\x99\xb2\x90\x05\x79\x98\x52\xf5\x4b\x6f\x47\x78\xfd\x35\xe9\x69\x66\xad\xe5\xaa\xcb\x7a\x30\xf8\x45\x87\xa2\x40\x48\xcb\x0d\xd0\xf5\xbc\x16\xa8\x6e\xbb\xb1\x99\xd7\xd9\x22\xcd\xaf\x96\xf3\x72\xd5\x9c\x68\xbd\x2c\x2e\xe6\x81\x91\x55\x23\x35\x6c\xb8\x76\xe0\xdb\x67\x2b\x41\x64\x23\x31\xfc\x6c\x29\xb8\xe2\x98\x27\x1e\x28\xbc\x81\xac\x77\x82\xa7\x4b\x2e\xcc\x63\xb8\xbb\x69\x6f\x97\xdc\xb2\x38\xa7\x91\xf0\xb3\x52\xd1\xc6\xdb\xde\x22\x09\x9f\xc3\xfc\xfe\xf5\xcb\xec\xdc\x6c\xf7\xc7\xd9\xc9\x7f\xc8\x15\x47\x63\x8b\x2b\x9a\x8b\x95\x2b\xc6\x43\xf3\x6f\x34\xd6\x6e\x38\x3b\x71\x75\x78\x2e\x72\x0b\x38\xf5\xbd\x51\xea\xb5\xad\xa9\x5b\x95\x6c\xa8\x58\x2b\x53\xeb\xf7\xfa\xf0\x70\x7a\x58\xad\x06\xc5\x0d\xa9\x25\x50\x3b\xf9\x3d\x51\x33\xa5\x8a\x90\x0d\xcb\xe5\xa6\x83\x9b\x44\x45\x5e\x37\xa8\xf4\x82\xbb\x38\x3b\xf9\x5f\xb0\xb0\xa7\xbc\xd5\xc4\xae\x1f\x16\x58\x2e\x92\xb0\x6f\x5b\x82\xa4\xa2\xf8\x8c\xa3\xe8\x04\x25\x88\x61\xca\x56\x57\xae\xe7\x6d\x16\x4a\xa0\xeb\x9b\x59\x3c\x1e\xc8\x9f\x7f\x84\xb1\x3c\xbb\x3c\xe2\x19\xe2\xe9\xaf\x2e\x96\x67\x96\xe7\x92\x33\xdd\x2d\xa7\xb7\x6d\x91\xd3\x19\x4e\x3b\xb3\x81\x8e\x62\x1d\xbd\x33\xdd\x2e\x98\xed\x49\x6e\x5b\x14\xcb\x03\x5b\x22\xd8\x0c\xf2\x4c\xb0\x6a\x90\x35\xb2\x4a\x92\xf2\xdb\x9b\xa2\x25\x36\xb4\x2b\x84\xc7\x5c\xdc\x23\x11\x6d\x10\x05\x89\x15\x51\xc6\x92\x2e\xbf\x92\x51\x83\xa2\x6e\xf5\x1d\x0c\xda\x14\xcf\x87\xcb\xcb\x65\x6d\x7c\x9f\xc1\xa3\xdd\xd0\x15\x6a\x99\xd3\x2a\x25\x76\xa8\x01\x96\x86\xf6\x29\x57\x59\x5e\xd4\x80\x1e\xc6\x3f\x8b\x72\x66\x32\x01\x2e\xef\xc7\x6b\xa5\x32\x6f\x34\x32\xef\x14\x8b\x24\x1c\x9e\x7e\x0c\xcc\x8c\x3a\xda\x83\xee\x37\x6c\x1a\xf7\x3f\x5f\x9c\xf5\x02\xae\x9d\xd9\xe2\xbb\xf1\x6b\x2b\xc4\x2d\x66\x33\xc1\xaa\x6f\xeb\x34\xdf\x8a\xb0\xf8\x16\x75\xf1\x5d\xb7\xa4\xca\xfc\xf2\x7e\xa2\xb5\xed\x8d\xd2\x4e\x4f\x15\xcb\xf3\x70\x47\xaf\xe6\x84\xb4\xf5\x2b\xc4\xc6\x97\x2b\x3f\xa3\x53\x25\x63\xef\xdf\x01\x00\x00\xff\xff\x5b\xb0\x49\x10\x22\x20\x00\x00")

func assetsEnvironmentTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsEnvironmentTemplateYml,
		"assets/environment-template.yml",
	)
}

func assetsEnvironmentTemplateYml() (*asset, error) {
	bytes, err := assetsEnvironmentTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/environment-template.yml", size: 8226, mode: os.FileMode(420), modTime: time.Unix(1484088447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsVpcTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x98\x4b\x6f\xdb\x38\x10\xc7\xef\xf9\x14\x93\x60\x01\x6d\x81\x38\xb1\xa5\xa4\x68\x78\xf3\x3a\x4e\x63\x6c\x9b\x18\x96\xe1\x02\x69\xf6\x40\x4b\xe3\x58\xa8\x44\x6a\x49\x2a\x0f\x14\xf9\xee\x0b\x51\x92\x1f\xb4\xe4\xfa\x99\x4d\xe1\x8b\x45\x0e\x39\xf3\xff\x69\xc8\xa1\x58\xab\xd5\x0e\x9a\xdf\xdc\x3e\x46\x71\x48\x15\x5e\x71\x11\x51\x35\x40\x21\x03\xce\x08\x58\x76\xbd\x51\xaf\xd5\x2f\x6a\xf5\x0b\xeb\xa0\x4b\x05\x8d\x50\xa1\x90\xe4\x00\xa0\xc3\xa4\xa2\xcc\xc3\x3e\x32\xca\xbc\x97\xb4\x09\xe0\x12\xa5\x27\x82\x58\xe9\xc1\x85\x05\xa8\xcc\x04\x14\x87\x44\x22\x8c\xb8\x80\x41\xb7\xa5\x07\xf4\x5f\x62\x24\xe0\x2a\x11\xb0\x07\xdd\xd0\x0c\x43\xfe\x84\xfe\x80\x86\x09\xca\x6c\xd2\x1a\xf8\x38\xa2\x49\xa8\x26\x4f\x7e\xe0\x51\x85\x7e\xee\x52\xf7\x91\x19\x23\x57\x8e\xf5\x34\x25\x31\xb9\xc9\x90\xa1\x82\x91\xe0\x11\x3c\x8d\x03\x6f\x9c\x06\x45\x53\x63\x70\xdd\x6b\xa0\x9e\x87\x52\x9e\x94\x87\xf6\x35\x60\x5f\x90\x3d\xa8\x31\x01\xeb\xc2\xca\x9a\xe8\xf3\xa4\xa9\xf1\xc9\x9a\x0f\xa8\x7e\xa2\x7f\xa7\xf5\x59\x61\x5d\xaa\x14\x0a\x46\xe0\xe8\xcf\xfb\x7b\xff\x67\xe3\xd8\x79\xfd\x70\x7f\x7f\xb2\xca\xc3\x69\xfe\xd7\x7e\xfd\x70\xa4\xa7\x6c\x71\x26\x95\xa0\x01\x53\x73\x1a\xad\x28\x91\x0a\x86\x08\x14\x1e\x69\x18\xf8\xd0\xea\x5c\xf6\x60\x18\x72\xef\x07\x81\xe7\x13\xfd\x3b\x7d\x3e\x49\xa3\x1d\xc4\x5e\x2b\xf0\xc5\x5f\xba\xaf\x92\x96\x1e\xba\xfc\xb5\xad\xcb\xa6\x51\xc0\x69\x7c\x7c\xbf\x74\xba\xc9\x30\x0c\xbc\x0c\x42\xf3\xae\xb1\x16\xa9\xe6\x5d\x63\xc7\xa4\xec\xb3\xdf\x85\x94\xbd\x26\x29\x7b\x87\xa4\x1a\xbf\x15\x29\x67\x4d\x52\xce\x0e\x49\xd9\xef\x9a\x54\x8b\x33\x3f\x48\xc7\xe8\x22\x70\x4d\xa5\xb1\x18\x33\x5e\x47\x57\x8c\x90\x1b\xae\x8e\xb2\xc7\xb4\x3a\xe8\xa6\xf6\xbf\x09\x0d\xe5\x11\x81\xef\x87\x3d\x1c\x55\x2e\xe4\x63\xb0\xac\x7f\xca\xa6\xb7\xb7\x98\xde\xfe\xf5\xf4\xce\x16\xd3\x3b\xc6\xf4\x3d\x94\x3c\x11\x5e\x56\x2c\x07\xdd\x16\x99\x49\x91\xe6\x37\x97\x90\x76\xcb\x26\xa4\xd8\xb8\xbb\x82\xc7\x28\x54\x50\xd4\x56\x80\x69\x06\x82\xf6\x36\x5b\x12\x72\x93\x36\xa3\xc3\x10\x2f\x99\x74\x93\x38\xe6\x42\x11\xb0\x94\x48\xd0\x32\xbb\xaf\xb9\x54\x8c\x46\x28\x0d\x03\xf3\xa8\x90\x39\x32\x5a\x17\xf7\xdb\x72\x25\x59\x77\x91\x63\x59\x8e\x90\x92\x04\xa9\x90\x3b\x88\xbd\x8e\x5f\x48\xcd\xa1\x2c\x42\xa8\x4a\x98\xdc\xfc\x2b\x8d\x33\x8b\x4e\x7c\xcb\xbe\xd0\x84\x79\x63\x02\xa9\xe2\xbc\xbf\xf9\x48\x83\x90\x0e\x83\x30\x50\x2f\x77\x9c\x21\x81\x43\x17\x43\xf4\x14\x7c\x87\xfa\x31\x1c\x7e\x4e\x67\x95\x79\x76\x68\x91\xf4\x41\x4e\x93\xe0\x6f\x7c\x21\x70\x83\xea\x89\x8b\xc2\x23\x80\x3e\x11\x91\x3c\xb2\xc5\x2d\x77\x2b\x58\xf6\x0e\x61\xd9\xbb\x84\xd5\xd8\x0b\x2c\x67\x2b\x58\xce\x0e\x61\x39\xbb\x84\x65\xef\x08\x56\x87\xa5\x55\x00\xd5\x67\xaa\xf0\x89\xbe\x94\xc3\x32\x8c\x2a\x98\x6c\xe0\x7d\xd0\x6d\xad\x14\xc0\xa0\xdb\xca\xfb\x9b\x4a\x51\x6f\x1c\x21\x53\x6b\xbd\x19\xc3\xcb\xc4\x62\x51\x59\x16\x5b\x8f\x27\x0a\xfb\xe9\x56\x57\x1e\xd0\xb4\x7f\xad\x30\x36\xce\x66\xed\x6f\x49\x28\x79\xc9\x8f\x91\xf9\xf2\x96\x91\x12\xb0\x15\x71\x4e\x85\x4c\xc2\x35\x09\xe4\x96\x97\x28\x55\xc0\x68\xba\x50\x66\xf2\x7c\xfe\xbb\x07\x60\x55\xc0\x93\xed\x76\xea\xa7\x29\x25\xf7\x02\xed\x60\xd9\x9a\x2d\x1d\xb0\x71\x89\xc8\xfa\x0d\xed\xf3\x83\x56\x85\x64\x6c\x8d\x6f\x24\xac\x6a\x3b\x5f\x2a\xcc\xde\x42\x98\xf3\x46\xc2\xaa\xb6\xde\xa5\xc2\x9c\x0d\x84\xe5\x2b\xb0\xe9\x85\xe5\x22\xa6\xfd\xfb\x5e\xeb\x1d\x36\xe4\x09\xf3\xdb\xf1\x18\x23\x14\x34\xec\x72\xa1\xcc\x18\xdb\x4c\x89\x8a\x5d\xd2\x30\xaa\x88\x76\x6a\x65\xa0\x31\x74\x02\xf4\x92\x10\x6f\x92\x68\x88\x22\xfd\xae\xa8\x3b\xc5\x11\xaf\x2b\xb8\xe2\x1e\x0f\x09\x58\x1f\xad\x19\xdb\xa6\x97\xbd\x4a\x7d\xc5\x52\x9c\x17\x1f\x04\xca\xf4\x8c\x38\xa2\xa1\x9c\x1c\x12\x97\x6c\x20\xa9\xe6\x1e\x65\x0f\x48\x26\x98\xae\x04\x8f\x74\x04\xf6\x99\x35\x69\xec\xf3\xd4\xfd\xf9\xb9\x73\x6e\x4d\xc9\xb9\xee\xf5\xfb\xe1\x75\xb6\x17\x5e\x3a\x80\xe2\xd2\xeb\x97\xcc\x6c\xdb\x20\x96\x35\xe4\xb8\xae\x95\x8a\xdf\x0f\xaf\xf3\xff\x39\xbf\x3e\xd5\x0d\x56\x59\xc3\x6d\xa2\x34\xac\xf7\x03\xaa\xbe\x15\xa8\xd9\x8f\xb5\x8d\x38\x99\x98\x26\x8b\xd0\x28\x9e\xa6\x98\x15\xab\x45\xe9\x80\xfd\xd6\xf7\xd5\xde\x84\x51\x42\xdf\x54\xde\x56\x55\x7e\x13\x79\xce\x9b\xca\xdb\xaa\xd6\xaf\x22\xef\x36\x51\x71\xa2\xb2\x6b\x13\x5d\xad\xf3\x03\xf3\xcc\x6d\x55\x7f\x8c\x10\xf8\xc0\x47\xa0\xc6\x08\x8f\xb1\xa7\x4d\xf2\x12\x3d\x57\xdb\xdb\xcf\xfa\x62\xa4\x70\x4f\x23\xfd\x65\x96\x0c\xe1\x8f\x9f\x1a\x87\xab\xa8\xf7\x23\x6d\x7e\xad\x69\x67\x8b\x4b\xa3\x32\x80\x58\xdb\x81\xd4\x86\x81\x3f\x77\xbb\x9c\x85\x92\x7b\xbd\x62\x84\x74\x46\xd3\xf3\x45\xc5\x82\x48\xbb\x96\x24\x7e\xde\xa9\xa3\xbe\xe1\xda\xc1\xba\x0a\x17\x94\x2d\xae\x94\x35\xd5\xda\x1b\xa8\xb5\x97\xa9\xb5\xf7\xa5\xd6\x2e\x51\xeb\xac\xa9\xd6\xd9\x40\xad\xb3\x4c\xad\xb3\x2f\xb5\x4e\xc7\x3f\xf8\x2f\x00\x00\xff\xff\x28\xeb\x52\x31\x42\x1c\x00\x00")

func assetsVpcTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsVpcTemplateYml,
		"assets/vpc-template.yml",
	)
}

func assetsVpcTemplateYml() (*asset, error) {
	bytes, err := assetsVpcTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/vpc-template.yml", size: 7234, mode: os.FileMode(420), modTime: time.Unix(1484088279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/environment-template.yml": assetsEnvironmentTemplateYml,
	"assets/vpc-template.yml": assetsVpcTemplateYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"environment-template.yml": &bintree{assetsEnvironmentTemplateYml, map[string]*bintree{}},
		"vpc-template.yml": &bintree{assetsVpcTemplateYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

