// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./assets", "app.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBhcHBsaWNhdGlvbiBpbiBDb2RlRGVwbG95ClJlc291cmNlczoKICBBcHBsaWNhdGlvbjoKICAgIFR5cGU6IEFXUzo6Q29kZURlcGxveTo6QXBwbGljYXRpb24KICAgIFByb3BlcnRpZXM6CiAgICAgIEFwcGxpY2F0aW9uTmFtZTogIVJlZiBBV1M6OlN0YWNrTmFtZQpPdXRwdXRzOgogIEFwcGxpY2F0aW9uTmFtZToKICAgIERlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBhcHBsaWNhdGlvbgogICAgVmFsdWU6ICFSZWYgQXBwbGljYXRpb24K\"")
	packr.PackJSONBytes("./assets", "bucket.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBTMyBidWNrZXQgLSBTSEFSRUQgQlkgQUxMIFBJUEVMSU5FUwpQYXJhbWV0ZXJzOgogIE5hbWVzcGFjZToKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IE5hbWVzcGFjZSBmb3Igc3RhY2sgcHJlZml4ZXMKICBCdWNrZXRQcmVmaXg6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBQcmVmaXggdG8gdXNlIGZvciB0aGUgYnVja2V0IG5hbWUKUmVzb3VyY2VzOgogIEJ1Y2tldDoKICAgIFR5cGU6IEFXUzo6UzM6OkJ1Y2tldAogICAgUHJvcGVydGllczoKICAgICAgQnVja2V0TmFtZTogIVN1YiAke05hbWVzcGFjZX0tJHtCdWNrZXRQcmVmaXh9LSR7QVdTOjpSZWdpb259LSR7QVdTOjpBY2NvdW50SWR9CgogIEJ1Y2tldFBvbGljeToKICAgIFR5cGU6IEFXUzo6UzM6OkJ1Y2tldFBvbGljeQogICAgUHJvcGVydGllczoKICAgICAgQnVja2V0OiAhUmVmIEJ1Y2tldAogICAgICBQb2xpY3lEb2N1bWVudDoKICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycKICAgICAgICBJZDogU1NFQW5kU1NMUG9saWN5CiAgICAgICAgU3RhdGVtZW50OgogICAgICAgIC0gU2lkOiBEZW55VW5FbmNyeXB0ZWRPYmplY3RVcGxvYWRzCiAgICAgICAgICBFZmZlY3Q6IERlbnkKICAgICAgICAgIFByaW5jaXBhbDogJyonCiAgICAgICAgICBBY3Rpb246IHMzOlB1dE9iamVjdAogICAgICAgICAgUmVzb3VyY2U6ICFTdWIgYXJuOmF3czpzMzo6OiR7QnVja2V0fS8qCiAgICAgICAgICBDb25kaXRpb246CiAgICAgICAgICAgIFN0cmluZ05vdEVxdWFsczoKICAgICAgICAgICAgICBzMzp4LWFtei1zZXJ2ZXItc2lkZS1lbmNyeXB0aW9uOiBhd3M6a21zCiAgICAgICAgLSBTaWQ6IERlbnlJbnNlY3VyZUNvbm5lY3Rpb25zCiAgICAgICAgICBFZmZlY3Q6IERlbnkKICAgICAgICAgIFByaW5jaXBhbDogJyonCiAgICAgICAgICBBY3Rpb246IHMzOioKICAgICAgICAgIFJlc291cmNlOiAhU3ViIGFybjphd3M6czM6Ojoke0J1Y2tldH0vKgogICAgICAgICAgQ29uZGl0aW9uOgogICAgICAgICAgICBCb29sOgogICAgICAgICAgICAgIGF3czpTZWN1cmVUcmFuc3BvcnQiOiBmYWxzZQpPdXRwdXRzOgogIEJ1Y2tldDoKICAgIERlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBwaXBlbGluZSBidWNrZXQKICAgIFZhbHVlOiAhUmVmIEJ1Y2tldAogICAgRXhwb3J0OgogICAgICBOYW1lOiAhU3ViICR7TmFtZXNwYWNlfS1idWNrZXQtJHtCdWNrZXRQcmVmaXh9Cg==\"")
	packr.PackJSONBytes("./assets", "buildspec.yml", "\"dmVyc2lvbjogMC4yCgpwaGFzZXM6CiAgYnVpbGQ6CiAgICBjb21tYW5kczoKICAgICAgLSBlY2hvICcuLi5yZXBsYWNlIHdpdGggcmVhbCBidWlsZCBjb21tYW5kcy4uLicKCmFydGlmYWN0czoKICBmaWxlczoKICAgIC0gJyoqLyonCgo=\"")
	packr.PackJSONBytes("./assets", "common-iam.yml", "\"\"")
	packr.PackJSONBytes("./assets", "database.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBkYXRhYmFzZSBpbiBhIHNwZWNpZmljIGVudmlyb25tZW50ClBhcmFtZXRlcnM6CiAgRGF0YWJhc2VFbmdpbmU6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBFbmdpbmUgZm9yIGRhdGFiYXNlCiAgICBEZWZhdWx0OiBhdXJvcmEKICBEYXRhYmFzZUluc3RhbmNlQ2xhc3M6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBJbnN0YW5jZSBjbGFzcyBmb3IgZGF0YWJhc2UKICAgIERlZmF1bHQ6IGRiLnQyLnNtYWxsCiAgRGF0YWJhc2VNYXN0ZXJVc2VybmFtZToKICAgIFR5cGU6IFN0cmluZwogICAgTm9FY2hvOiB0cnVlCiAgICBEZXNjcmlwdGlvbjogVXNlcm5hbWUgb2YgZGF0YWJhc2UKICBEYXRhYmFzZU5hbWU6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBOYW1lIG9mIGRhdGFiYXNlCiAgRGF0YWJhc2VNYXN0ZXJQYXNzd29yZDoKICAgIFR5cGU6IFN0cmluZwogICAgTm9FY2hvOiB0cnVlCiAgICBEZXNjcmlwdGlvbjogUGFzc3dvcmQgb2YgZGF0YWJhc2UKICBEYXRhYmFzZVN0b3JhZ2U6CiAgICBUeXBlOiBOdW1iZXIKICAgIERlc2NyaXB0aW9uOiBBbGxvY2F0ZWQgc3RvcmFnZSBmb3IgREIKICAgIERlZmF1bHQ6IDEwMAogIFZwY0lkOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUgdmFsdWUgdG8gaW1wb3J0IGZvciB0aGUgVnBjSWQKICBJbnN0YW5jZVN1Ym5ldElkczoKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IE5hbWUgb2YgdGhlIHZhbHVlIHRvIGltcG9ydCBmb3IgdGhlIHN1Ym5ldCBpZHMKICBJbnN0YW5jZVNlY3VyaXR5R3JvdXA6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSB2YWx1ZSB0byBpbXBvcnQgZm9yIHRoZSBzZWN1cml0eSBncm91cCBpZAogIERhdGFiYXNlS2V5QXJuOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogS01TIGtleSBmb3IgRGF0YWJhc2UKQ29uZGl0aW9uczoKICBJc0NsdXN0ZXJlZDoKICAgICJGbjo6T3IiOgogICAgICAtICJGbjo6RXF1YWxzIjoKICAgICAgICAgIC0gIVJlZiBEYXRhYmFzZUVuZ2luZQogICAgICAgICAgLSAnYXVyb3JhLXBvc3RncmVzcWwnCiAgICAgIC0gIkZuOjpFcXVhbHMiOgogICAgICAgICAgLSAhUmVmIERhdGFiYXNlRW5naW5lCiAgICAgICAgICAtICdhdXJvcmEnCiAgSXNTdGFuZGFsb25lOgogICAgIkZuOjpOb3QiOgogICAgICAtICFDb25kaXRpb24gSXNDbHVzdGVyZWQKUmVzb3VyY2VzOgogIERCU3VibmV0c0dyb3VwOgogICAgVHlwZTogIkFXUzo6UkRTOjpEQlN1Ym5ldEdyb3VwIgogICAgUHJvcGVydGllczoKICAgICAgREJTdWJuZXRHcm91cERlc2NyaXB0aW9uOiBEQiBzdWJuZXRzCiAgICAgIFN1Ym5ldElkczoKICAgICAgICBGbjo6U3BsaXQ6CiAgICAgICAgLSAiLCIKICAgICAgICAtIEZuOjpJbXBvcnRWYWx1ZTogIVN1YiAke0luc3RhbmNlU3VibmV0SWRzfQogIERCU2VjdXJpdHlHcm91cDoKICAgIFR5cGU6ICJBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCIKICAgIFByb3BlcnRpZXM6CiAgICAgIEdyb3VwRGVzY3JpcHRpb246IERCIHNlY3VyaXR5IGdyb3VwcwogICAgICBWcGNJZDoKICAgICAgICBGbjo6SW1wb3J0VmFsdWU6ICFTdWIgJHtWcGNJZH0KICAgICAgU2VjdXJpdHlHcm91cEluZ3Jlc3M6CiAgICAgICAgLSBJcFByb3RvY29sOiB0Y3AKICAgICAgICAgIEZyb21Qb3J0OiAnNTQzMicKICAgICAgICAgIFRvUG9ydDogJzU0MzInCiAgICAgICAgICBTb3VyY2VTZWN1cml0eUdyb3VwSWQ6CiAgICAgICAgICAgIEZuOjpJbXBvcnRWYWx1ZTogIVN1YiAke0luc3RhbmNlU2VjdXJpdHlHcm91cH0KICAgICAgICAtIElwUHJvdG9jb2w6IHRjcAogICAgICAgICAgRnJvbVBvcnQ6ICczMzA2JwogICAgICAgICAgVG9Qb3J0OiAnMzMwNicKICAgICAgICAgIFNvdXJjZVNlY3VyaXR5R3JvdXBJZDoKICAgICAgICAgICAgRm46OkltcG9ydFZhbHVlOiAhU3ViICR7SW5zdGFuY2VTZWN1cml0eUdyb3VwfQogICAgICAgIC0gSXBQcm90b2NvbDogdGNwCiAgICAgICAgICBGcm9tUG9ydDogJzE0MzMnCiAgICAgICAgICBUb1BvcnQ6ICcxNDMzJwogICAgICAgICAgU291cmNlU2VjdXJpdHlHcm91cElkOgogICAgICAgICAgICBGbjo6SW1wb3J0VmFsdWU6ICFTdWIgJHtJbnN0YW5jZVNlY3VyaXR5R3JvdXB9CiAgICAgICAgLSBJcFByb3RvY29sOiB0Y3AKICAgICAgICAgIEZyb21Qb3J0OiAnMTUyMScKICAgICAgICAgIFRvUG9ydDogJzE1MjEnCiAgICAgICAgICBTb3VyY2VTZWN1cml0eUdyb3VwSWQ6CiAgICAgICAgICAgIEZuOjpJbXBvcnRWYWx1ZTogIVN1YiAke0luc3RhbmNlU2VjdXJpdHlHcm91cH0KICAgICAgU2VjdXJpdHlHcm91cEVncmVzczoKICAgICAgICAtIElwUHJvdG9jb2w6ICctMScKICAgICAgICAgIENpZHJJcDogJzEyNy4wLjAuMS8zMicKICBEQkNsdXN0ZXI6CiAgICBUeXBlOiBBV1M6OlJEUzo6REJDbHVzdGVyCiAgICBDb25kaXRpb246IElzQ2x1c3RlcmVkCiAgICBQcm9wZXJ0aWVzOgogICAgICBEYXRhYmFzZU5hbWU6ICFSZWYgRGF0YWJhc2VOYW1lCiAgICAgIERCU3VibmV0R3JvdXBOYW1lOiAhUmVmIERCU3VibmV0c0dyb3VwCiAgICAgIEVuZ2luZTogIVJlZiBEYXRhYmFzZUVuZ2luZQogICAgICBLbXNLZXlJZDogIVJlZiBEYXRhYmFzZUtleUFybgogICAgICBTdG9yYWdlRW5jcnlwdGVkOiB0cnVlCiAgICAgIE1hc3RlclVzZXJuYW1lOiAhUmVmIERhdGFiYXNlTWFzdGVyVXNlcm5hbWUKICAgICAgTWFzdGVyVXNlclBhc3N3b3JkOiAhUmVmIERhdGFiYXNlTWFzdGVyUGFzc3dvcmQKICAgICAgVGFnczoKICAgICAgLSBLZXk6IE5hbWUKICAgICAgICBWYWx1ZTogIVJlZiBEYXRhYmFzZU5hbWUKICAgICAgVnBjU2VjdXJpdHlHcm91cElkczoKICAgICAgLSBSZWY6IERCU2VjdXJpdHlHcm91cAogICAgRGVsZXRpb25Qb2xpY3k6IFNuYXBzaG90CiAgREJJbnN0YW5jZUNsdXN0ZXJlZDoKICAgIFR5cGU6IEFXUzo6UkRTOjpEQkluc3RhbmNlCiAgICBDb25kaXRpb246IElzQ2x1c3RlcmVkCiAgICBQcm9wZXJ0aWVzOgogICAgICBQdWJsaWNseUFjY2Vzc2libGU6IGZhbHNlCiAgICAgIERCQ2x1c3RlcklkZW50aWZpZXI6ICFSZWYgREJDbHVzdGVyCiAgICAgIERCSW5zdGFuY2VDbGFzczogIVJlZiBEYXRhYmFzZUluc3RhbmNlQ2xhc3MKICAgICAgREJTdWJuZXRHcm91cE5hbWU6ICFSZWYgREJTdWJuZXRzR3JvdXAKICAgICAgRW5naW5lOiAhUmVmIERhdGFiYXNlRW5naW5lCiAgICAgIFRhZ3M6CiAgICAgIC0gS2V5OiBOYW1lCiAgICAgICAgVmFsdWU6ICFSZWYgRGF0YWJhc2VOYW1lCiAgREJJbnN0YW5jZVN0YW5kYWxvbmU6CiAgICBUeXBlOiBBV1M6OlJEUzo6REJJbnN0YW5jZQogICAgQ29uZGl0aW9uOiBJc1N0YW5kYWxvbmUKICAgIFByb3BlcnRpZXM6CiAgICAgIFB1YmxpY2x5QWNjZXNzaWJsZTogZmFsc2UKICAgICAgQWxsb2NhdGVkU3RvcmFnZTogIVJlZiBEYXRhYmFzZVN0b3JhZ2UKICAgICAgS21zS2V5SWQ6ICFSZWYgRGF0YWJhc2VLZXlBcm4KICAgICAgU3RvcmFnZUVuY3J5cHRlZDogdHJ1ZQogICAgICBTdG9yYWdlVHlwZTogZ3AyCiAgICAgIERCTmFtZTogIVN1YiAke0RhdGFiYXNlTmFtZX0KICAgICAgREJJbnN0YW5jZUNsYXNzOiAhUmVmIERhdGFiYXNlSW5zdGFuY2VDbGFzcwogICAgICBEQlN1Ym5ldEdyb3VwTmFtZTogIVJlZiBEQlN1Ym5ldHNHcm91cAogICAgICBWUENTZWN1cml0eUdyb3VwczoKICAgICAgLSBSZWY6IERCU2VjdXJpdHlHcm91cAogICAgICBFbmdpbmU6ICFSZWYgRGF0YWJhc2VFbmdpbmUKICAgICAgTWFzdGVyVXNlcm5hbWU6ICFSZWYgRGF0YWJhc2VNYXN0ZXJVc2VybmFtZQogICAgICBNYXN0ZXJVc2VyUGFzc3dvcmQ6ICFSZWYgRGF0YWJhc2VNYXN0ZXJQYXNzd29yZAogICAgICBUYWdzOgogICAgICAtIEtleTogTmFtZQogICAgICAgIFZhbHVlOiAhUmVmIERhdGFiYXNlTmFtZQogICAgRGVsZXRpb25Qb2xpY3k6IFNuYXBzaG90Ck91dHB1dHM6CiAgRGF0YWJhc2VJZGVudGlmaWVyOgogICAgRGVzY3JpcHRpb246IERCIElkZW50aWZpZXIKICAgIFZhbHVlOgogICAgICBGbjo6SWY6CiAgICAgIC0gSXNDbHVzdGVyZWQKICAgICAgLSAhUmVmIERCQ2x1c3RlcgogICAgICAtICFSZWYgREJJbnN0YW5jZVN0YW5kYWxvbmUKICBEYXRhYmFzZU5hbWU6CiAgICBEZXNjcmlwdGlvbjogREIgTmFtZQogICAgVmFsdWU6ICFSZWYgRGF0YWJhc2VOYW1lCiAgRGF0YWJhc2VNYXN0ZXJVc2VybmFtZToKICAgIERlc2NyaXB0aW9uOiBEQiBVc2VybmFtZQogICAgVmFsdWU6ICFSZWYgRGF0YWJhc2VNYXN0ZXJVc2VybmFtZQogIERhdGFiYXNlRW5kcG9pbnRBZGRyZXNzOgogICAgRGVzY3JpcHRpb246IERCIEVuZHBvaW50IEFkZHJlc3MKICAgIFZhbHVlOgogICAgICBGbjo6SWY6CiAgICAgIC0gSXNDbHVzdGVyZWQKICAgICAgLSAhU3ViICR7REJDbHVzdGVyLkVuZHBvaW50LkFkZHJlc3N9CiAgICAgIC0gIVN1YiAke0RCSW5zdGFuY2VTdGFuZGFsb25lLkVuZHBvaW50LkFkZHJlc3N9CiAgRGF0YWJhc2VFbmRwb2ludFBvcnQ6CiAgICBEZXNjcmlwdGlvbjogREIgRW5kcG9pbnQgUG9ydAogICAgVmFsdWU6CiAgICAgIEZuOjpJZjoKICAgICAgLSBJc0NsdXN0ZXJlZAogICAgICAtICFTdWIgJHtEQkNsdXN0ZXIuRW5kcG9pbnQuUG9ydH0KICAgICAgLSAhU3ViICR7REJJbnN0YW5jZVN0YW5kYWxvbmUuRW5kcG9pbnQuUG9ydH0K\"")
	packr.PackJSONBytes("./assets", "elb.yml", "\"\"")
	packr.PackJSONBytes("./assets", "env-ec2.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBlbnZpcm9ubWVudCBmb3IgRUMyIG1pY3Jvc2VydmljZXMKUGFyYW1ldGVyczoKICBFQzJJbnN0YW5jZVByb2ZpbGVBcm46CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBBUk4gb2YgaW5zdGFuY2UgcHJvZmlsZSBmb3IgRUMyIGluc3RhbmNlIHRvIGFzc3VtZQogIEluc3RhbmNlVHlwZToKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IEluc3RhbmNlIHR5cGUgdG8gdXNlLgogICAgRGVmYXVsdDogdDIubWljcm8KICBEZXNpcmVkQ2FwYWNpdHk6CiAgICBUeXBlOiBOdW1iZXIKICAgIERlZmF1bHQ6ICcxJwogICAgRGVzY3JpcHRpb246IE51bWJlciBvZiBpbnN0YW5jZXMgdG8gbGF1bmNoIGluIHlvdXIgRUNTIGNsdXN0ZXIKICBNaW5TaXplOgogICAgVHlwZTogTnVtYmVyCiAgICBEZWZhdWx0OiAnMScKICAgIERlc2NyaXB0aW9uOiBNaW5pbXVtIG51bWJlciBvZiBpbnN0YW5jZXMgdGhhdCBjYW4gYmUgbGF1bmNoZWQgaW4geW91ciBFQ1MgY2x1c3RlcgogIE1heFNpemU6CiAgICBUeXBlOiBOdW1iZXIKICAgIERlZmF1bHQ6ICcyJwogICAgRGVzY3JpcHRpb246IE1heGltdW0gbnVtYmVyIG9mIGluc3RhbmNlcyB0aGF0IGNhbiBiZSBsYXVuY2hlZCBpbiB5b3VyIEVDUyBjbHVzdGVyCiAgS2V5TmFtZToKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IEtleU5hbWUgdG8gYXNzb2NpYXRlIHdpdGggd29ya2VyIGluc3RhbmNlcy4gIExlYXZlIGJsYW5rIHRvIGRpc2FibGUgU1NIIGFjY2Vzcy4KICAgIERlZmF1bHQ6ICcnCiAgU3NoQWxsb3c6CiAgICBEZXNjcmlwdGlvbjogU3VibmV0IGZyb20gd2hpY2ggdG8gYWxsb3cgU1NIIGFjY2Vzcy4KICAgIFR5cGU6IFN0cmluZwogICAgTWluTGVuZ3RoOiAnOScKICAgIE1heExlbmd0aDogJzE4JwogICAgQWxsb3dlZFBhdHRlcm46ICIoXFxkezEsM30pXFwuKFxcZHsxLDN9KVxcLihcXGR7MSwzfSlcXC4oXFxkezEsM30pLyhcXGR7MSwyfSkiCiAgICBDb25zdHJhaW50RGVzY3JpcHRpb246ICdtdXN0IGJlIGEgdmFsaWQgQ0lEUiBibG9jazogeC54LngueC94LicKICBUYXJnZXRDUFVSZXNlcnZhdGlvbjoKICAgIERlc2NyaXB0aW9uOiBUYXJnZXQgQ1BVIHJlc2VydmF0aW9uICUgZm9yIGF1dG9zY2FsaW5nCiAgICBUeXBlOiBOdW1iZXIKICAgIERlZmF1bHQ6ICc3NScKICBUYXJnZXRNZW1vcnlSZXNlcnZhdGlvbjoKICAgIERlc2NyaXB0aW9uOiBUYXJnZXQgTWVtb3J5IHJlc2VydmF0aW9uICUgZm9yIGF1dG9zY2FsaW5nCiAgICBUeXBlOiBOdW1iZXIKICAgIERlZmF1bHQ6ICc3NScKICBJbWFnZUlkOgogICAgRGVzY3JpcHRpb246IEVDUyBBTUkgdG8gbGF1bmNoCiAgICBUeXBlOiBTdHJpbmcKICAgIERlZmF1bHQ6ICcnCiAgSW1hZ2VPc1R5cGU6CiAgICBEZXNjcmlwdGlvbjogT1MgVHlwZSBmb3IgRUNTIEFNSQogICAgVHlwZTogU3RyaW5nCiAgICBEZWZhdWx0OiAnYW1hem9uJwogICAgQWxsb3dlZFZhbHVlczoKICAgIC0gJ2FtYXpvbicKICAgIC0gJ2NlbnRvczcnCiAgICAtICd3aW5kb3dzJwogIEluc3RhbmNlU3VibmV0SWRzOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUgdmFsdWUgdG8gaW1wb3J0IGZvciB0aGUgZWNzIHN1Ym5ldCBpZHMKICBWcGNJZDoKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IE5hbWUgb2YgdGhlIHZhbHVlIHRvIGltcG9ydCBmb3IgdGhlIFZwY0lkCiAgSHR0cFByb3h5OgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogUHJveHkgdG8gdXNlIGZyb20gRUNTIGNsdXN0ZXIgaW5zdGFuY2VzIChob3N0OnBvcnQpCiAgICBEZWZhdWx0OiAnJwogIEVsYlNlY3VyaXR5R3JvdXA6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBUaGUgc2VjdXJpdHkgZ3JvdXAgdG8gYWRkIHRvIHRoZSBFQ1MgaW5zdGFuY2UgZm9yIEVMQiBhY2Nlc3MKUmVzb3VyY2VzOgogIEluc3RhbmNlU2VjdXJpdHlHcm91cDoKICAgIFR5cGU6IEFXUzo6RUMyOjpTZWN1cml0eUdyb3VwCiAgICBQcm9wZXJ0aWVzOgogICAgICBWcGNJZDoKICAgICAgICBGbjo6SW1wb3J0VmFsdWU6ICFTdWIgJHtWcGNJZH0KICAgICAgR3JvdXBEZXNjcmlwdGlvbjogTWljcm9zZXJ2aWNlIEhvc3QgU2VjdXJpdHkgR3JvdXAKICAgICAgU2VjdXJpdHlHcm91cEluZ3Jlc3M6CiAgICAgIC0gSXBQcm90b2NvbDogdGNwCiAgICAgICAgRnJvbVBvcnQ6ICcyMicKICAgICAgICBUb1BvcnQ6ICcyMicKICAgICAgICBDaWRySXA6ICFSZWYgU3NoQWxsb3cKICBIb3N0Mkhvc3RSdWxlSW5ncmVzczoKICAgIFR5cGU6IEFXUzo6RUMyOjpTZWN1cml0eUdyb3VwSW5ncmVzcwogICAgUHJvcGVydGllczoKICAgICAgSXBQcm90b2NvbDogdGNwCiAgICAgIEZyb21Qb3J0OiAnMCcKICAgICAgVG9Qb3J0OiAnNjU1MzUnCiAgICAgIFNvdXJjZVNlY3VyaXR5R3JvdXBJZDogIUdldEF0dCBJbnN0YW5jZVNlY3VyaXR5R3JvdXAuR3JvdXBJZAogICAgICBHcm91cElkOiAhR2V0QXR0IEluc3RhbmNlU2VjdXJpdHlHcm91cC5Hcm91cElkCiAgSG9zdDJIb3N0UnVsZUVncmVzczoKICAgIFR5cGU6IEFXUzo6RUMyOjpTZWN1cml0eUdyb3VwRWdyZXNzCiAgICBQcm9wZXJ0aWVzOgogICAgICBJcFByb3RvY29sOiB0Y3AKICAgICAgRnJvbVBvcnQ6ICcwJwogICAgICBUb1BvcnQ6ICc2NTUzNScKICAgICAgRGVzdGluYXRpb25TZWN1cml0eUdyb3VwSWQ6ICFHZXRBdHQgSW5zdGFuY2VTZWN1cml0eUdyb3VwLkdyb3VwSWQKICAgICAgR3JvdXBJZDogIUdldEF0dCBJbnN0YW5jZVNlY3VyaXR5R3JvdXAuR3JvdXBJZAogIEhvc3QySW50ZXJuZXRFZ3Jlc3M6CiAgICBUeXBlOiBBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEVncmVzcwogICAgUHJvcGVydGllczoKICAgICAgSXBQcm90b2NvbDogJ3RjcCcKICAgICAgRnJvbVBvcnQ6ICcwJwogICAgICBUb1BvcnQ6ICc2NTUzNScKICAgICAgQ2lkcklwOiAnMC4wLjAuMC8wJwogICAgICBHcm91cElkOiAhR2V0QXR0IEluc3RhbmNlU2VjdXJpdHlHcm91cC5Hcm91cElkCk91dHB1dHM6CiAgVnBjSWQ6CiAgICBWYWx1ZToKICAgICAgRm46OkltcG9ydFZhbHVlOiAhU3ViICR7VnBjSWR9CiAgICBEZXNjcmlwdGlvbjogVnBjIElkIGZvciB0aGUgZW52aXJvbm1lbnQKICAgIEV4cG9ydDoKICAgICAgTmFtZTogIVN1YiAke0FXUzo6U3RhY2tOYW1lfS1WcGNJZAogIEluc3RhbmNlU2VjdXJpdHlHcm91cDoKICAgIFZhbHVlOiAhUmVmIEluc3RhbmNlU2VjdXJpdHlHcm91cAogICAgRGVzY3JpcHRpb246IFNlY3VyaXR5IEdyb3VwIElEIGZvciB0aGUgbWljcm9zZXJ2aWNlIGluc3RhbmNlcwogICAgRXhwb3J0OgogICAgICBOYW1lOiAhU3ViICR7QVdTOjpTdGFja05hbWV9LUluc3RhbmNlU2VjdXJpdHlHcm91cAogIEluc3RhbmNlU3VibmV0SWRzOgogICAgVmFsdWU6CiAgICAgIEZuOjpJbXBvcnRWYWx1ZTogIVN1YiAke0luc3RhbmNlU3VibmV0SWRzfQogICAgRGVzY3JpcHRpb246IFN1Ym5ldCBJZHMgZm9yIHRoZSBFQ1MgY2x1c3RlcgogICAgRXhwb3J0OgogICAgICBOYW1lOiAhU3ViICR7QVdTOjpTdGFja05hbWV9LUluc3RhbmNlU3VibmV0SWRzCiAgS2V5TmFtZToKICAgIFZhbHVlOiAhUmVmIEtleU5hbWUKICBJbnN0YW5jZVR5cGU6CiAgICBWYWx1ZTogIVJlZiBJbnN0YW5jZVR5cGUKICBTc2hBbGxvdzoKICAgIFZhbHVlOiAhUmVmIFNzaEFsbG93CiAgSW1hZ2VJZDoKICAgIFZhbHVlOiAhUmVmIEltYWdlSWQKICBJbWFnZU9zVHlwZToKICAgIFZhbHVlOiAhUmVmIEltYWdlT3NUeXBlCiAgSHR0cFByb3h5OgogICAgVmFsdWU6ICFSZWYgSHR0cFByb3h5CiAgRWxiU2VjdXJpdHlHcm91cDoKICAgIFZhbHVlOiAhUmVmIEVsYlNlY3VyaXR5R3JvdXA=\"")
	packr.PackJSONBytes("./assets", "env-ecs.yml", "\"\"")
	packr.PackJSONBytes("./assets", "env-iam.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBJQU0gcm9sZXMgZm9yIGFuIGVudmlyb25tZW50ClBhcmFtZXRlcnM6CiAgTmFtZXNwYWNlOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogTmFtZXNwYWNlIGZvciBzdGFjayBwcmVmaXhlcwogIEVudmlyb25tZW50TmFtZToKICAgIFR5cGU6IFN0cmluZwogICAgRGVzY3JpcHRpb246IE5hbWUgb2YgZW52aXJvbm1lbnQgdXNlZCBmb3IgcmVzb3VyY2UgbmFtZXNwYWNlCiAgUHJvdmlkZXI6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBQcm92aWRlciB0eXBlIGZvciBzZXJ2aWNlcwogICAgRGVmYXVsdDogImVjcyIKICAgIEFsbG93ZWRWYWx1ZXM6CiAgICAgIC0gImVjcyIKICAgICAgLSAiZWNzLWZhcmdhdGUiCiAgICAgIC0gImVjMiIKQ29uZGl0aW9uczoKICBJc0Vjc1NlcnZpY2U6CiAgICAiRm46OkVxdWFscyI6CiAgICAgIC0gIVJlZiBQcm92aWRlcgogICAgICAtICdlY3MnCiAgSXNFY3NGYXJnYXRlU2VydmljZToKICAgICJGbjo6RXF1YWxzIjoKICAgICAgLSAhUmVmIFByb3ZpZGVyCiAgICAgIC0gJ2Vjcy1mYXJnYXRlJwpSZXNvdXJjZXM6CiAgRUMySW5zdGFuY2VQcm9maWxlOgogICAgVHlwZTogQVdTOjpJQU06Okluc3RhbmNlUHJvZmlsZQogICAgQ29uZGl0aW9uOiBJc0Vjc1NlcnZpY2UKICAgIFByb3BlcnRpZXM6CiAgICAgIFBhdGg6ICIvIgogICAgICBSb2xlczoKICAgICAgLSAhUmVmIEVDMlJvbGUKICBFQzJSb2xlOgogICAgVHlwZTogQVdTOjpJQU06OlJvbGUKICAgIENvbmRpdGlvbjogSXNFY3NTZXJ2aWNlCiAgICBQcm9wZXJ0aWVzOgogICAgICBSb2xlTmFtZTogIVN1YiAke05hbWVzcGFjZX0tZW52aXJvbm1lbnQtJHtFbnZpcm9ubWVudE5hbWV9LWluc3RhbmNlLSR7QVdTOjpSZWdpb259CiAgICAgIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudDoKICAgICAgICBTdGF0ZW1lbnQ6CiAgICAgICAgLSBFZmZlY3Q6IEFsbG93CiAgICAgICAgICBQcmluY2lwYWw6CiAgICAgICAgICAgIFNlcnZpY2U6CiAgICAgICAgICAgIC0gZWMyLmFtYXpvbmF3cy5jb20KICAgICAgICAgIEFjdGlvbjoKICAgICAgICAgIC0gc3RzOkFzc3VtZVJvbGUKICAgICAgUGF0aDogIi8iCiAgICAgIE1hbmFnZWRQb2xpY3lBcm5zOgogICAgICAtIGFybjphd3M6aWFtOjphd3M6cG9saWN5L0FtYXpvbkVDMkNvbnRhaW5lclJlZ2lzdHJ5UmVhZE9ubHkKICAgICAgUG9saWNpZXM6CiAgICAgIC0gUG9saWN5TmFtZTogZWNzLXNlcnZpY2UKICAgICAgICBQb2xpY3lEb2N1bWVudDoKICAgICAgICAgIFN0YXRlbWVudDoKICAgICAgICAgIC0gRWZmZWN0OiBBbGxvdwogICAgICAgICAgICBBY3Rpb246CiAgICAgICAgICAgIC0gZWNzOlJlZ2lzdGVyQ29udGFpbmVySW5zdGFuY2UKICAgICAgICAgICAgLSBlY3M6RGVyZWdpc3RlckNvbnRhaW5lckluc3RhbmNlCiAgICAgICAgICAgIC0gZWNzOlN1Ym1pdENvbnRhaW5lclN0YXRlQ2hhbmdlCiAgICAgICAgICAgIC0gZWNzOlN1Ym1pdFRhc2tTdGF0ZUNoYW5nZQogICAgICAgICAgICBSZXNvdXJjZTogIVN1YiBhcm46YXdzOmVjczoke0FXUzo6UmVnaW9ufToke0FXUzo6QWNjb3VudElkfTpjbHVzdGVyLyR7TmFtZXNwYWNlfS1lbnZpcm9ubWVudC0ke0Vudmlyb25tZW50TmFtZX0KICAgICAgICAgIC0gRWZmZWN0OiBBbGxvdwogICAgICAgICAgICBBY3Rpb246CiAgICAgICAgICAgIC0gZWNzOlN0YXJ0VGVsZW1ldHJ5U2Vzc2lvbgogICAgICAgICAgICAtIGVjczpQb2xsCiAgICAgICAgICAgIFJlc291cmNlOiAiKiIKICAgICAgICAgICAgQ29uZGl0aW9uOgogICAgICAgICAgICAgIEFybkVxdWFsczoKICAgICAgICAgICAgICAgICJlY3M6Y2x1c3RlciI6ICFTdWIgYXJuOmF3czplY3M6JHtBV1M6OlJlZ2lvbn06JHtBV1M6OkFjY291bnRJZH06Y2x1c3Rlci8ke05hbWVzcGFjZX0tZW52aXJvbm1lbnQtJHtFbnZpcm9ubWVudE5hbWV9CiAgICAgICAgICAtIEVmZmVjdDogQWxsb3cKICAgICAgICAgICAgQWN0aW9uOgogICAgICAgICAgICAtIGVjczpTdGFydFRhc2sKICAgICAgICAgICAgUmVzb3VyY2U6ICIqIgogICAgICAgICAgICBDb25kaXRpb246CiAgICAgICAgICAgICAgQXJuRXF1YWxzOgogICAgICAgICAgICAgICAgImVjczpjbHVzdGVyIjogIVN1YiBhcm46YXdzOmVjczoke0FXUzo6UmVnaW9ufToke0FXUzo6QWNjb3VudElkfTpjbHVzdGVyLyR7TmFtZXNwYWNlfS1lbnZpcm9ubWVudC0ke0Vudmlyb25tZW50TmFtZX0KICAgICAgICAgIC0gRWZmZWN0OiBBbGxvdwogICAgICAgICAgICBBY3Rpb246CiAgICAgICAgICAgIC0gZWNzOkRpc2NvdmVyUG9sbEVuZHBvaW50CiAgICAgICAgICAgIFJlc291cmNlOiAiKiIKICAgICAgICAgIC0gRWZmZWN0OiBBbGxvdwogICAgICAgICAgICBBY3Rpb246CiAgICAgICAgICAgIC0gbG9nczpDcmVhdGVMb2dHcm91cAogICAgICAgICAgICAtIGxvZ3M6Q3JlYXRlTG9nU3RyZWFtCiAgICAgICAgICAgIC0gbG9nczpQdXRMb2dFdmVudHMKICAgICAgICAgICAgLSBsb2dzOkRlc2NyaWJlTG9nR3JvdXBzCiAgICAgICAgICAgIC0gbG9nczpEZXNjcmliZUxvZ1N0cmVhbXMKICAgICAgICAgICAgUmVzb3VyY2U6ICcqJwogIFdhaXRIYW5kbGU6CiAgICBUeXBlOiAiQVdTOjpDbG91ZEZvcm1hdGlvbjo6V2FpdENvbmRpdGlvbkhhbmRsZSIKT3V0cHV0czoKICBFQzJJbnN0YW5jZVByb2ZpbGVBcm46CiAgICBEZXNjcmlwdGlvbjogSW5zdGFuY2UgcHJvZmlsZSBmb3IgRUNTIGNvbnRhaW5lciBpbnN0YW5jZXMKICAgIFZhbHVlOgogICAgICBGbjo6SWY6CiAgICAgIC0gSXNFY3NTZXJ2aWNlCiAgICAgIC0gIUdldEF0dCBFQzJJbnN0YW5jZVByb2ZpbGUuQXJuCiAgICAgIC0gJycK\"")
	packr.PackJSONBytes("./assets", "pipeline-iam.yml", "\"\"")
	packr.PackJSONBytes("./assets", "pipeline.yml", "\"\"")
	packr.PackJSONBytes("./assets", "repo.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSByZXBvc2l0b3J5IGluIEVDUiB0byBzdG9yZSBkb2NrZXIgaW1hZ2VzClBhcmFtZXRlcnM6CiAgUmVwb05hbWU6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBSZXBvIG5hbWUKUmVzb3VyY2VzOgogIEVjc1JlcG86CiAgICBUeXBlOiBBV1M6OkVDUjo6UmVwb3NpdG9yeQogICAgUHJvcGVydGllczoKICAgICAgUmVwb3NpdG9yeU5hbWU6ICFSZWYgUmVwb05hbWUKICAgICAgUmVwb3NpdG9yeVBvbGljeVRleHQ6CiAgICAgICAgVmVyc2lvbjogJzIwMDgtMTAtMTcnCiAgICAgICAgU3RhdGVtZW50OgogICAgICAgIC0gU2lkOiBBbGxvd1B1c2hQdWxsCiAgICAgICAgICBFZmZlY3Q6IEFsbG93CiAgICAgICAgICBQcmluY2lwYWw6CiAgICAgICAgICAgIEFXUzogIioiCiAgICAgICAgICBDb25kaXRpb246CiAgICAgICAgICAgIEFybkxpa2U6CiAgICAgICAgICAgICAgYXdzOlNvdXJjZUFybjogIVN1YiBhcm46YXdzOmlhbToke0FXUzo6QWNjb3VudElkfTp1c2VyLyoKICAgICAgICAgIEFjdGlvbjoKICAgICAgICAgIC0gZWNyOkdldERvd25sb2FkVXJsRm9yTGF5ZXIKICAgICAgICAgIC0gZWNyOkJhdGNoR2V0SW1hZ2UKICAgICAgICAgIC0gZWNyOkJhdGNoQ2hlY2tMYXllckF2YWlsYWJpbGl0eQogICAgICAgICAgLSBlY3I6UHV0SW1hZ2UKICAgICAgICAgIC0gZWNyOkluaXRpYXRlTGF5ZXJVcGxvYWQKICAgICAgICAgIC0gZWNyOlVwbG9hZExheWVyUGFydAogICAgICAgICAgLSBlY3I6Q29tcGxldGVMYXllclVwbG9hZApPdXRwdXRzOgogIFJlcG9Vcmw6CiAgICBEZXNjcmlwdGlvbjogVXJsIG9mIHRoZSByZXBvCiAgICBWYWx1ZTogIVN1YiAke0FXUzo6QWNjb3VudElkfS5ka3IuZWNyLiR7QVdTOjpSZWdpb259LmFtYXpvbmF3cy5jb20vJHtSZXBvTmFtZX0K\"")
	packr.PackJSONBytes("./assets", "schedule.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBzY2hlZHVsZWQgdGFzayBpbiBhIHNwZWNpZmljIGVudmlyb25tZW50IGNvbnRhaW5pbmcgYSBDbG91ZFdhdGNoIGV2ZW50IGFuZCBhIFJ1bGVUYXJnZXQKUGFyYW1ldGVyczoKICBFY3NFdmVudHNSb2xlQXJuOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogQVJOIG9mIElBTSByb2xlIGZvciBDbG91ZFdhdGNoIGV2ZW50cyB0byBhc3N1bWUKICBFY3NDbHVzdGVyOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUgdmFsdWUgdG8gaW1wb3J0IGZvciBFY3MgQ2x1c3RlciB0byBkZXBsb3kgdG8uCiAgU2NoZWR1bGVFeHByZXNzaW9uOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogVGltZXNwZWMgY3JvbigqICogKiAqID8gKikgb3IgcmF0ZSh0aW1lc3BlYykgb2Ygc2NoZWR1bGVkIHRhc2sKICBTY2hlZHVsZUNvbW1hbmQ6CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBUaGUgY29tbWFuZCBvdmVycmlkZSBhcyBhIEpTT04gb2JqZWN0IChzaG91bGQgYmUgYSBKU09OIGFycmF5KQogIFNlcnZpY2VOYW1lOgogICAgVHlwZTogU3RyaW5nCiAgICBEZXNjcmlwdGlvbjogTmFtZSBvZiBzZXJ2aWNlCiAgTWljcm9zZXJ2aWNlVGFza0RlZmluaXRpb25Bcm46CiAgICBUeXBlOiBTdHJpbmcKICAgIERlc2NyaXB0aW9uOiBUYXNrRGVmaW5pdGlvbiBhcyBhIFN0cmluZwpSZXNvdXJjZXM6CiAgU2NoZWR1bGVkUnVsZToKICAgIFR5cGU6ICJBV1M6OkV2ZW50czo6UnVsZSIKICAgIFByb3BlcnRpZXM6CiAgICAgIFNjaGVkdWxlRXhwcmVzc2lvbjogIVN1YiAke1NjaGVkdWxlRXhwcmVzc2lvbn0KICAgICAgU3RhdGU6IEVOQUJMRUQKICAgICAgVGFyZ2V0czoKICAgICAgLSBJZDogU2NoZWR1bGVSdWxlSWQKICAgICAgICBBcm46CiAgICAgICAgICBGbjo6U3ViOgogICAgICAgICAgICAtICJhcm46YXdzOmVjczoke0FXUzo6UmVnaW9ufToke0FXUzo6QWNjb3VudElkfTpjbHVzdGVyLyR7RWNzQ2x1c3Rlck5hbWV9IgogICAgICAgICAgICAtIEVjc0NsdXN0ZXJOYW1lOgogICAgICAgICAgICAgICAgRm46OkltcG9ydFZhbHVlOiAhUmVmIEVjc0NsdXN0ZXIKICAgICAgICBSb2xlQXJuOiAhUmVmIEVjc0V2ZW50c1JvbGVBcm4KICAgICAgICBJbnB1dDogIVN1YiAneyAiY29udGFpbmVyT3ZlcnJpZGVzIjogWyB7ICJuYW1lIjogIiR7U2VydmljZU5hbWV9IiwgImNvbW1hbmQiOiAke1NjaGVkdWxlQ29tbWFuZH0gfSBdIH0nCiAgICAgICAgRWNzUGFyYW1ldGVyczoKICAgICAgICAgIFRhc2tEZWZpbml0aW9uQXJuOiAhUmVmIE1pY3Jvc2VydmljZVRhc2tEZWZpbml0aW9uQXJuCiAgICAgICAgICBUYXNrQ291bnQ6IDEKCg==\"")
	packr.PackJSONBytes("./assets", "service-ec2.yml", "\"\"")
	packr.PackJSONBytes("./assets", "service-ecs.yml", "\"\"")
	packr.PackJSONBytes("./assets", "service-iam.yml", "\"\"")
	packr.PackJSONBytes("./assets", "vpc-target.yml", "\"LS0tCkFXU1RlbXBsYXRlRm9ybWF0VmVyc2lvbjogJzIwMTAtMDktMDknCkRlc2NyaXB0aW9uOiBNVSBWUEMgdGFyZ2V0aW5nIGFuIGV4aXN0aW5nIFZQQyBhbmQgc3VibmV0cyB0aGF0IGFyZSBub3QgbWFuYWdlZCBieSBtdQpQYXJhbWV0ZXJzOgogIFZwY0lkOgogICAgRGVzY3JpcHRpb246IFZQQyB0byB0YXJnZXQKICAgIFR5cGU6IFN0cmluZwogIEluc3RhbmNlU3VibmV0SWRzOgogICAgRGVzY3JpcHRpb246IEVDMiBzdWJuZXQgaWRzCiAgICBUeXBlOiBDb21tYURlbGltaXRlZExpc3QKICBFbGJTdWJuZXRJZHM6CiAgICBEZXNjcmlwdGlvbjogRUxCIHN1Ym5ldCBpZHMKICAgIFR5cGU6IENvbW1hRGVsaW1pdGVkTGlzdAogIEFaQ291bnQ6CiAgICBEZXNjcmlwdGlvbjogTnVtYmVyIG9mIGF2YWlsYWJpbGl0eSB6b25lcyB0byB1c2UKICAgIFR5cGU6IFN0cmluZwogICAgRGVmYXVsdDogJzMnClJlc291cmNlczoKICBXYWl0SGFuZGxlOgogICAgVHlwZTogIkFXUzo6Q2xvdWRGb3JtYXRpb246OldhaXRDb25kaXRpb25IYW5kbGUiCk91dHB1dHM6CiAgVnBjSWQ6CiAgICBEZXNjcmlwdGlvbjogVGhlIGlkIG9mIHRoZSB2cGMKICAgIFZhbHVlOiAhUmVmIFZwY0lkCiAgICBFeHBvcnQ6CiAgICAgIE5hbWU6ICFTdWIgJHtBV1M6OlN0YWNrTmFtZX0tVnBjSWQKICBJbnN0YW5jZVN1Ym5ldElkczoKICAgIERlc2NyaXB0aW9uOiBUaGUgRUMyIHN1Ym5ldGlkcwogICAgVmFsdWU6CiAgICAgIEZuOjpKb2luOgogICAgICAtICcsJwogICAgICAtICFSZWYgSW5zdGFuY2VTdWJuZXRJZHMKICAgIEV4cG9ydDoKICAgICAgTmFtZTogIVN1YiAke0FXUzo6U3RhY2tOYW1lfS1JbnN0YW5jZVN1Ym5ldElkcwogIEVsYlN1Ym5ldElkczoKICAgIERlc2NyaXB0aW9uOiBUaGUgRUxCIHN1Ym5ldGlkcwogICAgVmFsdWU6CiAgICAgIEZuOjpKb2luOgogICAgICAtICcsJwogICAgICAtICFSZWYgRWxiU3VibmV0SWRzCiAgICBFeHBvcnQ6CiAgICAgIE5hbWU6ICFTdWIgJHtBV1M6OlN0YWNrTmFtZX0tRWxiU3VibmV0SWRzCg==\"")
	packr.PackJSONBytes("./assets", "vpc.yml", "\"\"")
}
