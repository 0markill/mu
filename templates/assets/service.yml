---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU service in a specific environment containing an ALB target group with ECS service and task definition
Parameters:
  ServiceName:
    Type: String
    Description: Name of service
  ImageUrl:
    Type: String
    Description: Docker Image URL
  ServicePort:
    Type: String
    Description: Port exposed in service
    Default: '8080'
  ServiceHealthEndpoint:
    Type: String
    Description: Endpoint to test service health
    Default: '/health'
  ServiceCpu:
    Type: String
    Description: CPU units to reserve for container
    Default: '10'
  ServiceMemory:
    Type: String
    Description: Memory to allocate to contianer (in MiB)
    Default: '300'
  ServiceDesiredCount:
    Type: Number
    Default: '2'
    Description: Number of containers to launch in your ECS service.
  PathPattern:
    Type: CommaDelimitedList
    Description: List of paths to route to the service.
    Default: ''
  ListenerRulePriority:
    Type: Number
    Description: The priority of the rule being added to the listener
    Default: 1
  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
  EcsCluster:
    Type: String
    Description: Name of the value to import for Ecs Cluster to deploy to.
  EcsElbHttpListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
  EcsElbHttpsListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
Conditions:
  HasElbHttpsListener:
    "Fn::Not":
      - "Fn::Equals":
        - Fn::ImportValue: !Sub ${EcsElbHttpsListenerArn}
        - ''
  HasPathPattern:
    "Fn::Not":
      - "Fn::Equals":
        - "Fn::Join": [ "", !Ref PathPattern]
        - ""
Resources:
  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EcsCluster}
      DesiredCount: !Ref ServiceDesiredCount
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        - Fn::If:
          - HasPathPattern
          - ContainerName: !Ref ServiceName
            ContainerPort: !Ref ServicePort
            TargetGroupArn: !Ref EcsElbTargetGroup
          - !Ref AWS::NoValue
      Role:
        Fn::If:
          - HasPathPattern
          - !Ref EcsServiceRole
          - !Ref AWS::NoValue
      TaskDefinition: !Ref MicroserviceTaskDefinition
  EcsServiceRole:
    Type: AWS::IAM::Role
    Condition: HasPathPattern
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancing:DescribeTargetHealth
            - elasticloadbalancing:RegisterTargets
            Resource: "*"
  MicroserviceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: !Ref ServiceName
        Cpu: !Ref ServiceCpu
        Essential: 'true'
        Image: !Ref ImageUrl
        Memory: !Ref ServiceMemory
        PortMappings:
        - HostPort: 0
          ContainerPort: !Ref ServicePort
      Volumes: []
  EcsElbHttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasPathPattern
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref EcsElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${EcsElbHttpListenerArn}
      Priority: !Ref ListenerRulePriority
  EcsElbHttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasPathPattern, HasElbHttpsListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref EcsElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${EcsElbHttpsListenerArn}
      Priority: !Ref ListenerRulePriority
  EcsElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: HasPathPattern
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: !Ref ServiceHealthEndpoint
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: !Ref ServicePort
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
