---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  InstanceType:
    Type: String
    Description: Instance type to use.
    Default: t2.micro
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster
  KeyName:
    Type: String
    Description: KeyName to associate with worker instances.  Leave blank to disable SSH access.
    Default: ''
  SshAllow:
    Description: Subnet from which to allow SSH access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ScaleOutThreshold:
    Description: Threshold at which a scale out event will be initiated
    Type: Number
    Default: '80'
  ScaleInThreshold:
    Description: Threshold at which a scale in event will be initiated
    Type: Number
    Default: '30'
  ImageId:
    Description: ECS AMI to launch
    Type: String
    Default: ''
  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
  PublicSubnetAZ1Id:
    Type: String
    Description: Name of the value to import for the AZ1 subnet id
  PublicSubnetAZ2Id:
    Type: String
    Description: Name of the value to import for the AZ2 subnet id
    Default: ''
  PublicSubnetAZ3Id:
    Type: String
    Description: Name of the value to import for the AZ3 subnet id
    Default: ''
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - SshAllow
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - DesiredCapacity
          - MaxSize
    ParameterLabels:
      InstanceType:
        default: "Instance type to launch?"
      KeyName:
        default: "Key to grant SSH access (blank for none)?"
      SshAllow:
        default: "CIDR block to grant SSH access?"
      DesiredCapacity:
        default: "Desired ECS cluster instance count?"
      MaxSize:
        default: "Maximum ECS cluster instance count?"
Conditions:
  HasKeyName:
    "Fn::Not":
      - "Fn::Equals": [!Ref KeyName, '']
  HasPublicSubnetAZ1:
    "Fn::Not":
      - "Fn::Equals": [!Ref PublicSubnetAZ1Id, '']
  HasPublicSubnetAZ2:
    "Fn::Not":
      - "Fn::Equals": [!Ref PublicSubnetAZ2Id, '']
  HasPublicSubnetAZ3:
    "Fn::Not":
      - "Fn::Equals": [!Ref PublicSubnetAZ3Id, '']
Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: []
    Properties:
      VPCZoneIdentifier:
      - Fn::If:
        - HasPublicSubnetAZ1
        - Fn::ImportValue: !Sub ${PublicSubnetAZ1Id}
        - !Ref AWS::NoValue
      - Fn::If:
        - HasPublicSubnetAZ2
        - Fn::ImportValue: !Sub ${PublicSubnetAZ2Id}
        - !Ref AWS::NoValue
      - Fn::If:
        - HasPublicSubnetAZ3
        - Fn::ImportValue: !Sub ${PublicSubnetAZ3Id}
        - !Ref AWS::NoValue
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '1'
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
  MemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Scale-out if Memory > ${ScaleOutThreshold}% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ScaleOutThreshold
      AlarmActions:
      - !Ref ScaleOutPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref EcsCluster
      ComparisonOperator: GreaterThanThreshold
  MemoryAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Scale-in if Memory < ${ScaleInThreshold}% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ScaleInThreshold
      AlarmActions:
      - !Ref ScaleInPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref EcsCluster
      ComparisonOperator: LessThanThreshold
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${EcsCluster}  >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      ImageId: !Ref ImageId
      SecurityGroups: [ !Ref HostSG ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !If [ HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:RegisterContainerInstance
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:*
            - ecs:Poll
            Resource: "*"
  HostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
      GroupDescription: ECS Host Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SshAllow
  ElbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  ELB2HostRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !GetAtt ElbSG.GroupId
      GroupId: !GetAtt HostSG.GroupId
  Host2ELBRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !GetAtt HostSG.GroupId
      GroupId: !GetAtt ElbSG.GroupId
  EcsElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::If:
        - HasPublicSubnetAZ1
        - Fn::ImportValue: !Sub ${PublicSubnetAZ1Id}
        - !Ref AWS::NoValue
      - Fn::If:
        - HasPublicSubnetAZ2
        - Fn::ImportValue: !Sub ${PublicSubnetAZ2Id}
        - !Ref AWS::NoValue
      - Fn::If:
        - HasPublicSubnetAZ3
        - Fn::ImportValue: !Sub ${PublicSubnetAZ3Id}
        - !Ref AWS::NoValue
      SecurityGroups:
      - !Ref ElbSG
  EcsElbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EcsElb
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref EcsElbDefaultTargetGroup
      Port: '80'
      Protocol: HTTP
  EcsElbDefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: '8080'
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
Outputs:
  BaseUrl:
    Value: !Sub http://${EcsElb.DNSName}/
    Description: ELB URL
  VpcId:
    Value:
      Fn::ImportValue: !Sub ${VpcId}
    Description: VPC ID for the ECS cluster
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
  EcsElbListenerArn:
    Value: !Ref EcsElbListener
    Description: Arn of the ELB Listener.
    Export:
      Name: !Sub ${AWS::StackName}-EcsElbListenerArn
  EcsCluster:
    Value: !Ref EcsCluster
    Description: Name of the ECS cluster.
    Export:
      Name: !Sub ${AWS::StackName}-EcsCluster

