// Code generated by go-bindata.
// sources:
// assets/cluster.yml
// assets/vpc.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xfb\x6f\xdb\xb8\xf9\xf7\xfc\x15\x5f\xbd\x0e\xbe\x1e\x2a\xdb\x71\xae\x87\x56\x58\x7a\x70\x1c\xb7\x35\xce\x69\x8d\x38\x6d\x81\x3e\x50\xd0\xd2\x67\x9b\xab\x44\x6a\x24\x95\xc7\x75\xf9\xdf\x07\x92\x92\x4c\x4a\x72\x9a\xf4\xba\xdd\x6e\x98\x8b\xa0\x16\xf9\xf1\x7b\x3f\x29\x07\x41\xb0\x37\x7a\xbb\x38\xc3\x34\x4b\x88\xc2\x67\x5c\xa4\x44\xbd\x41\x21\x29\x67\x21\x74\x87\x83\xfd\x41\x30\x78\x12\x0c\x9e\x74\xf7\xe6\x44\x90\x14\x15\x0a\x19\xee\x01\x4c\x99\x54\x84\x45\x78\x76\x95\xa1\x7e\x06\x30\xdf\x60\xa1\x04\x65\x6b\xb3\x70\x8c\x32\x12\x34\x53\x06\x55\x09\x0f\xea\x2a\x43\x50\x1c\x72\x89\xbd\x02\x6c\x45\xf2\x44\x85\xa0\x86\xbd\x94\x46\x82\xef\x99\xa3\x54\x60\x3c\x26\x19\x89\xa8\xba\x72\x09\xbc\xcc\xd3\x25\x0a\xff\x64\x77\xbf\xdb\xa4\x68\x01\x81\xaf\x80\x16\xb4\xa5\xa6\x9b\x90\x9c\x45\x1b\xa0\x0c\xae\x78\x2e\x60\x32\x5e\x40\x94\xe4\x52\x19\x9c\x27\xe4\x72\x41\x7f\xc3\xaf\xd2\x1b\xb6\xd0\x3b\x21\x97\x34\xcd\x53\x60\x6d\x74\x37\x44\x41\x44\x18\x2c\xb1\x60\x00\xe3\x1d\x2c\xfc\x8a\x57\x2f\x49\x7a\x2b\x9d\x16\xa0\x5a\x2a\x22\x25\x8f\x28\x51\x08\x17\x54\x6d\xe0\x82\x8b\xcf\x28\xb6\x0c\xf4\x00\x66\x48\xce\x11\x96\x09\x61\x9f\xf5\x81\x98\x4a\xb2\x4c\x10\x16\x8b\x17\x40\xa2\x08\xa5\xac\x59\xa3\xab\x45\x5c\xc8\xcd\x28\x49\xf8\x45\xd8\x24\xbe\xc8\x97\x0c\x15\xac\x04\x4f\xe1\x62\x43\xa3\x8d\x61\x43\x03\x37\x70\x36\xa4\x38\xa1\x6c\x86\x6c\xad\x36\x21\x74\x9f\x58\x55\x9e\x90\xcb\x6a\x69\xff\x71\xd7\xe7\x65\xd0\x33\xff\xfa\x03\xb3\x6c\x38\xc2\x78\x4e\x94\x42\xc1\x42\xe8\xfc\xf0\xe1\x43\xfc\x65\xff\xe1\xc1\xf5\x83\x0f\x1f\x7a\xb7\x79\xe8\x17\x5f\x87\xd7\x0f\x3a\x06\xe5\x98\x33\xa9\x04\xa1\x4c\x79\x32\x76\xd3\x5c\x2a\x6d\x33\x02\xe7\x24\xa1\x31\x8c\xa7\xc7\xa7\xb0\x4c\x78\xf4\x39\x84\xcb\x9e\xf9\xd7\xbf\xec\x19\x4d\x45\x24\xc1\x57\xb9\x3a\xdb\x08\x94\x1b\x9e\xc4\x2d\x2a\xab\xf6\x80\xa8\x42\x67\x04\xa4\x3e\x08\x3c\x57\x80\xe7\xc8\x14\x5c\xd0\x24\xd1\x24\x29\xa3\x4a\x1b\x34\xfe\x9a\x2f\x3e\x1e\x54\xf4\xa7\xec\x1b\xc9\x53\xf6\xad\xd4\x0f\x0c\xf5\x69\x4a\xd6\x38\x6d\x23\xaa\x9d\x7b\x74\x32\xdd\x46\xde\x2e\xbf\x76\xdd\xee\x4d\x16\x95\xc8\x6e\x8e\x00\xe3\xfe\x7c\x05\x6a\x83\xda\x42\xb9\x89\x05\x9a\x66\x5c\x28\x58\x71\x61\xd6\x0d\xb2\x3d\x80\x79\xbe\x4c\x68\x64\xdd\x76\xf4\x6e\xff\xfb\x11\x18\xbd\xdb\x07\x69\xa3\x81\x36\x09\x0d\xbf\x27\xa1\xa1\x47\xa8\xae\x36\x9f\xf0\xc1\xf7\x24\x7c\x70\x03\xe1\x13\x54\x24\x26\x8a\x68\x6a\xa3\xb7\x8b\x30\x1c\x27\x3c\x8f\x6d\x29\xd1\x24\xc2\x29\x53\x28\x56\x24\x2a\x92\x5a\x55\x48\x9e\x0b\x9e\x67\xd2\x2e\x02\x04\x30\x23\x4b\x4c\xca\x47\xfd\x89\x4b\x2a\x9d\xaa\x7c\x8c\x39\x5b\xd1\x75\x2e\x0c\xea\x4e\x05\xeb\x17\xa7\xf2\x13\x78\x65\xca\xdb\x28\x72\xa7\xb7\x56\x66\xbb\xdb\x30\x34\xca\x15\x37\x41\x47\xd9\xfa\xae\x4c\xd5\xaa\x9b\xb7\x57\x54\x20\x5f\x51\x86\x8f\x0a\x49\xb3\xf4\xee\xd0\x55\x59\x6a\x6d\xe0\xfd\x52\x32\xe6\x55\x18\xff\xe8\xaf\x78\xa5\x0f\xac\x05\x61\xca\x49\xe3\xf0\x83\xad\x1b\xda\x1f\x18\x67\xf8\xa0\xc2\xe5\x17\x08\x1f\xd9\x36\x59\xb6\xe1\xac\x50\xb4\xd6\x7a\x1f\x53\x01\xe2\x56\xca\xaa\xb6\x41\xc4\x73\xa6\x2a\x6c\x5e\x05\xf7\xb1\x94\x05\xfa\x46\x2c\x63\xce\x62\xaa\xcd\x68\xd4\xfd\x82\x48\x4f\x5b\x9d\x67\x2c\x0c\x5f\x72\xd5\xd9\x3a\xad\x59\x9a\xfc\x23\x27\x89\xec\x84\xf0\xfe\xde\x29\xae\x4a\x0d\x3f\x84\x6e\xf7\xa3\xc5\x52\x4b\x3e\x77\xc2\xd6\x48\x5c\x3b\xf1\x0e\x7f\x07\xde\xe1\x0d\x78\x0f\x7e\x07\xde\x83\x12\xef\x29\x4a\x9e\x8b\x08\x8d\x62\x27\x91\x1c\x5b\x13\xb8\x39\xca\x64\x8f\xc9\xd8\xa4\x90\xb2\x1f\x9a\x8c\x17\x3a\xd6\x8a\x50\x33\x29\xa3\x71\xc4\x01\xf0\x1e\x0c\x74\x91\xaf\x32\x64\xb1\x7c\xc5\x42\x78\xff\xd1\x06\x97\xe0\x19\x0a\x45\xb1\x8a\xab\x37\xf3\xf1\x3b\xce\x70\x1a\x23\x53\x74\x45\x4b\xd6\xb4\x98\x5a\xca\xe9\x6a\xeb\x54\x41\x8b\x4d\x9d\x4d\x03\x6e\x52\xe8\x1b\x9d\x51\x43\xb8\xb7\xc8\x97\x70\xff\x4b\xc3\x92\xd7\xce\x21\xa3\x3b\x23\xce\x4b\x6e\x8e\xdd\x85\xfa\xf0\xce\xd4\x87\xdf\x91\xfa\xc1\x9d\xa9\x1f\xdc\x8e\xfa\xcc\x64\x2e\x2f\xbd\x9a\x60\xb4\x07\xc6\x9c\x29\x42\x19\x8a\x32\xe3\xc9\x32\x09\x50\x66\x92\x40\x35\x18\x6c\xf3\x82\x3d\xe9\x66\xd9\x66\x06\xb2\x30\x6d\x59\x7a\x2c\xd0\x30\x31\xe7\x09\x8d\xaa\x54\x55\x7a\xf6\x82\xae\x19\x71\xea\xc5\x19\x4d\x91\xe7\x2a\x84\xf9\xd9\xfe\xa3\x13\xb3\xfc\x3a\x8b\x89\x42\xff\xb8\xe3\xb0\xa7\x3c\xd1\xff\x59\xa8\x2d\xa2\x13\xca\x2a\x11\xa7\x6c\x81\xe2\x9c\x46\x9e\x74\x46\xbe\x23\xa2\xa2\x4d\x5d\x6e\x5d\x45\x72\x89\x9a\x15\x97\x0f\xfd\x79\x4b\xa8\x7a\xc5\x7c\xe6\x65\x08\x5d\x25\x72\x74\x5b\x5a\x97\xdb\x5d\x41\x57\x7c\xb1\xa0\x3b\xe2\x6b\x14\xff\x3d\x97\x2a\x45\xa6\x2c\x96\xf1\x86\xb0\x35\x4e\x59\xad\x0e\xd6\xe3\xd7\x31\x78\x4b\x2e\x28\x0e\x8d\x39\x4f\x62\x7e\xc1\x42\x38\x18\x0c\xca\xda\x64\xc1\xb6\x64\x43\xd8\xdf\x76\xca\xff\x43\x52\x05\x5a\xac\x13\x4c\xb9\xb8\x1a\x25\x44\xa4\x2f\xe8\x7a\xd3\x10\xcc\x34\x65\x6f\xb5\x8b\x84\xa1\x81\xda\x25\x8f\xde\xf3\x3a\x44\x13\xc0\x46\x6b\x81\x1e\x53\xe8\xaa\xa0\x05\x4f\xe1\xfe\x97\xc6\xdc\x73\xfd\x57\xd3\x26\x3c\x82\x94\xb2\x5c\x6d\x43\x12\x95\xa0\x91\x95\xda\x1e\x3f\x45\x89\xe2\xdc\x84\x53\x01\xa3\x77\x65\xa6\xfb\x44\xcd\x72\x7f\x32\x5e\x94\x32\x2b\xa2\xa8\x54\x34\x0a\x61\x74\x8e\x82\xac\xcb\xc8\x9d\xa3\xa0\x3c\x76\xd5\x33\xd1\x3d\xac\x8d\x51\xb3\x27\xad\xd1\x8d\x32\xaa\xd9\xc8\xea\xbd\xc1\xba\xab\x81\x51\x54\x35\x01\x4e\x8a\xf2\x43\xa2\x4c\x1f\x34\x45\x26\x7d\x68\x2b\x68\x51\xc5\xbc\x46\xb3\xcc\x8a\xc6\xf2\x55\x15\xac\x0c\x9e\x66\x44\x50\xc9\xd9\xab\x0c\x05\x51\x5c\x84\xf0\x5c\xe7\x1c\x14\x67\x1b\xc2\x5c\x4e\x1d\x7b\xcf\xca\xfe\xeb\x7b\x9b\x9b\x32\xc7\xda\x7f\x2b\xad\xed\x4c\x99\x7f\x32\x63\x4f\xd9\x5d\x6d\x5d\xe6\x89\xff\x8c\xa9\x67\x28\x65\xdd\xce\xcd\x22\x77\x73\xce\x6a\x29\x99\x7b\x85\x4d\xaa\x29\xcd\x48\xde\x3e\xa9\x51\xb5\x2d\x3b\x91\x41\xe2\xce\x2e\x11\x4f\x53\xc2\x62\x6f\x9e\x01\x18\xec\x7f\x22\x71\xfc\xa9\xec\xa5\x3f\x29\xfe\x29\x72\x9b\xbb\xc6\xf9\xc2\xc9\xfe\x59\xdb\x05\xf8\xcb\xbd\xfe\x92\xb2\xfe\x92\xc8\x4d\x63\x0f\xa3\x0d\xd7\xb9\xf2\xd3\x78\xf6\x7a\x71\x36\x39\x3d\xbc\xff\x65\xab\xd4\x6b\x80\xa7\x4f\xa1\x8f\x2a\xea\x63\x24\xf5\x5f\xcf\x72\xef\xa0\x59\xd1\x04\x6b\x9c\x77\xcc\x89\x68\xc5\xf4\x5f\xb0\xc9\x33\x73\xaa\xd3\x64\x9b\x29\x93\x69\x77\xb0\xfd\x3e\x25\x94\x7d\x6c\x2c\x4b\x45\xa2\xcf\x87\xf7\xbf\x18\x55\x2f\xf4\x83\xdb\xf5\x94\x1f\x81\x6b\xca\x59\x09\x76\x6a\x9e\xea\x50\x29\x8f\x75\x55\x1f\x0c\x06\x3f\x0d\x06\xdd\xda\x26\xbf\x60\x28\x42\x10\x9c\xab\xda\xce\xda\x74\xcb\xcd\x9d\xad\xd8\x1b\xce\x3f\xcb\x5e\x6c\xc4\x27\xb9\xe2\x81\xc0\x84\x93\x18\xc5\x37\x2a\xa2\x81\x27\xd0\x14\x9a\xaa\x51\x82\xae\xd7\x28\xe4\x61\xc6\xa5\xea\xe5\xa6\xdf\x69\x00\x65\x44\x6d\x0e\xab\xb1\xa1\xd7\x8c\x84\x5e\xe9\xd4\xbd\x9d\xde\xdc\x40\x4a\x4c\xb0\x1f\xf6\x79\xa6\xfa\xe4\x42\x1a\x7f\xd3\x5c\x53\x46\x15\x04\xe7\x10\x04\xc6\x6c\xe0\x9a\x4d\x47\xf5\x35\x04\x81\x28\x78\x69\x09\x4a\xb3\xab\x4d\x07\x37\x1a\x12\x40\xe4\x8c\xc8\xc3\x9a\x49\xa4\x6d\xe9\x6a\xde\x29\xaf\xe4\x39\xf5\x22\xb2\xb0\x82\xf5\xd5\xfa\x32\x00\x32\xb2\x4c\x30\x76\x7a\xb8\xfa\xbe\xcc\x05\x9e\xe6\x8c\xe9\x54\xb1\x0b\xaa\x25\x4e\xc0\x0e\x7b\xed\xd1\x72\x23\xe4\x57\x1c\x6c\x47\x55\x2a\xef\x13\x6d\xee\x2c\x9e\xca\xfa\x80\x51\x2e\xa8\xba\x2a\x6e\x8f\xe0\xbd\x05\x7a\xc1\xa5\x5a\x3c\x87\x8f\x6d\x97\x24\x05\x9a\xe6\x5d\xd0\x94\xa4\xe5\xea\x5c\x70\x2d\x78\xd5\x93\x0d\x6b\x1b\xb5\xcb\x13\xb8\x37\x5d\xc1\x7b\xe7\x82\xe0\x21\xf8\xa3\xbf\x79\xea\xb8\x33\x4d\xa7\xe4\xed\xb5\x44\x71\xec\xa4\x62\x30\x43\xd3\x11\x91\xf8\xf3\x4f\xae\xde\x5b\x82\xcc\x49\x90\x10\x5c\xfa\x21\x73\x95\xa7\xf6\x3e\x23\x49\x20\xb8\x02\x72\x21\x03\xad\xf5\x25\xe7\x4a\x2a\x41\x32\x0f\xf8\x0f\xf1\xff\x06\x51\x69\x86\x0e\x08\x10\xee\xff\x72\x3b\xca\x2d\xcd\xf2\x0d\xa4\x9b\x66\x6c\x14\xcf\xe9\xe8\x44\x67\x8a\xa6\xad\x9b\x5e\x39\x27\x6a\x13\x42\xa7\x5f\x7a\xfc\x29\x77\x02\x25\xa8\x1c\x47\x2f\x5b\xda\xfa\x5b\x3b\xc1\x02\xa6\xb5\x23\x93\x32\x4f\x51\x03\xd8\xd6\xe3\x98\x47\xb9\xe9\xf3\x2b\x55\xea\x0e\x09\xfd\xa5\x00\x26\xab\x15\x46\x2a\x04\xf7\x06\xd3\x12\xa0\x2c\xa2\x19\x49\xfc\x88\x2e\x87\xc8\x3d\x3f\x70\x31\x1a\xf6\x48\x4a\x7e\xe3\x8c\x5c\xe8\x12\x9a\x3a\xfb\xb6\x4d\xf2\xaf\x32\xa5\x92\xe1\x96\xe1\x1d\x7a\x32\x72\x50\x57\x55\x56\x32\x1b\x48\x18\xc9\xa0\xc8\x7f\xdb\x99\x75\x87\xe4\xad\xb2\xdf\x24\x7d\x1b\xd7\x56\x4e\x19\x9a\x61\x1e\xfd\xae\xcc\xdd\xd7\x6e\xa4\xb7\x1a\xce\xde\x02\x7b\x8c\xe2\x2e\xd0\x54\x46\xfc\x1c\xc5\x9c\x27\xc9\x84\xc5\x19\xa7\x4c\xb5\x80\x2d\xf2\x65\x4a\xd5\x8f\x8d\x1d\x11\x36\xd7\x64\xa8\x91\x79\xcb\x65\xe5\x0c\xa1\xf3\xa3\x36\x85\xcd\x90\x2d\xf7\x6d\xc3\x30\xf4\x92\xea\x0e\xc7\x74\xde\xca\x40\x91\xb3\xda\x2e\x7a\x0c\x58\x19\xf7\x06\x5f\xe3\x85\x90\xe6\xa4\xca\xe3\xe0\x4e\xbc\x1e\x1f\x53\xb6\x16\x28\x1d\xb7\x99\x66\x73\xc1\x15\x8f\x78\x12\x82\x8a\xb6\x09\xed\x99\xe0\xe9\x9c\x0b\xf3\x66\x76\xb8\x2d\x68\x67\xbc\x65\x71\x4c\x63\x31\xcd\xca\xa9\x60\x7b\xe3\x3f\x49\x96\xff\x05\xca\x99\x1d\xfd\x9b\xf4\xf2\x78\xd0\xa2\x17\x77\xb1\xd4\x8b\xfb\xae\x75\x32\x3b\x1a\x6a\x5b\x9d\xe6\x2d\x79\xac\xa9\x9a\x82\xaf\x5d\x35\xbd\x95\x49\x87\xc5\x8a\x99\x8a\xbf\x9f\x1f\x3d\x3a\x78\x54\xae\x2e\xec\x35\x95\x47\x50\x77\x08\xcf\x51\x8d\x94\xb2\xf6\xeb\x15\xcb\xae\x82\x5d\x20\x1b\x02\x0e\x94\x5e\x18\x4e\x66\x47\x7f\x06\x09\x1b\xcc\xb7\x8a\x58\xd7\xc3\x24\x92\x93\x64\xd9\x94\x2d\x21\x7a\xc6\x9e\x71\x12\x1f\x91\x84\xb0\x88\xb2\xf5\x9b\x61\x18\x6e\x17\x8a\x9c\xd8\x14\xd3\xde\xe1\xca\xff\xdf\x8e\xff\xd1\xb7\xe3\xb5\x4e\xb8\xd6\x88\x68\x3f\xa8\xec\x3f\xd3\xb5\x89\xb5\xbd\x6d\xd9\xe5\x07\xc5\x81\x1d\x3e\xe0\xba\xc9\x48\xb0\xed\x25\xc7\x24\x59\x16\x20\xc5\x2b\xe2\xc6\xe5\x8a\x25\xbe\xe2\xe2\x82\x88\x78\x9b\x93\x88\x58\xa3\x32\x92\xd4\xf1\x15\x88\x1c\x88\xaa\xaf\xa8\x65\xb1\x6d\xf8\xbd\x38\x3b\x9b\x57\xc2\x37\x11\xdc\x5a\x0d\x75\xa2\x2d\x4d\x61\xc9\xc4\x0d\x6c\xc0\x9d\x0b\xc4\xab\x5c\x65\xb9\x8d\x31\x3d\x17\xbc\x16\x45\xfb\xe6\x02\x6f\x94\xca\xc2\x7e\xdf\x5c\x83\x4c\x92\x65\xef\xf8\xe5\xc2\xb4\xcb\xfd\x3d\x68\xfc\x0a\x63\x76\x04\xaf\x4f\x67\x0d\x77\xd0\xaa\xf6\xf0\x6e\xb5\xee\x39\x80\x87\x6c\x24\x58\xf9\x83\x01\x8d\xb7\x04\xb4\xbf\xf5\x99\x5c\x6a\x99\x4a\x39\x8b\x51\xc9\x8a\x56\xeb\xea\x83\x06\x2b\x2d\xef\x05\x6f\xb8\x42\xdb\xf9\x2b\x06\xe7\xfd\xee\xb7\xf0\x54\xd2\xd8\xfb\x57\x00\x00\x00\xff\xff\xcd\x09\x1d\xe5\x1c\x27\x00\x00")

func assetsClusterYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterYml,
		"assets/cluster.yml",
	)
}

func assetsClusterYml() (*asset, error) {
	bytes, err := assetsClusterYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster.yml", size: 10012, mode: os.FileMode(420), modTime: time.Unix(1484636245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsVpcYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x99\x4b\x6f\xdb\x38\x10\xc7\xef\xf9\x14\xd3\x60\x01\x6d\x81\x3a\xb5\xa5\xa4\x68\x78\xf3\x3a\x4e\x63\x6c\x9b\x18\x96\xe1\x02\x69\xf6\x40\x4b\xe3\x58\x88\x44\x6a\x49\x2a\x0f\x14\xf9\xee\x0b\x51\x92\x1f\xb4\xe4\xfa\x15\xaf\x8b\x5c\x6a\x72\xc8\x99\xff\x4f\x43\xce\x48\xad\xd5\x6a\x47\xcd\xef\x6e\x1f\xa3\x38\xa4\x0a\x2f\xb9\x88\xa8\x1a\xa0\x90\x01\x67\x04\x2c\xbb\xde\xa8\xd7\xea\xe7\xb5\xfa\xb9\x75\xd4\xa5\x82\x46\xa8\x50\x48\x72\x04\xd0\x61\x52\x51\xe6\x61\x1f\x19\x65\xde\x4b\x3a\x04\x70\x81\xd2\x13\x41\xac\xf4\xe2\xc2\x02\x54\x66\x02\x8a\x43\x22\x11\x46\x5c\xc0\xa0\xdb\xd2\x0b\xfa\x2f\x31\x12\x70\x95\x08\xd8\xbd\x1e\x68\x86\x21\x7f\x42\x7f\x40\xc3\x04\x65\xb6\x69\x0d\x7c\x1c\xd1\x24\x54\x93\x5f\x7e\xe0\x51\x85\x7e\xee\x52\xcf\x91\x19\x23\x57\x8e\xf5\x36\x25\x31\xb9\xc9\x90\xa1\x82\x91\xe0\x11\x3c\x8d\x03\x6f\x9c\x06\x45\x53\x63\x70\xdd\x2b\xa0\x9e\x87\x52\x9e\x94\x87\xf6\x2d\x60\x5f\x91\xdd\xab\x31\x01\xeb\xdc\xca\x86\xe8\xf3\x64\xa8\xf1\xd9\x9a\x0f\xa8\x7e\xa2\xff\x3e\xd6\x67\x85\x75\xa9\x52\x28\x18\x81\xe3\x3f\xef\xee\xfc\x9f\x8d\x0f\xce\xeb\xfb\xbb\xbb\x93\x55\x7e\x7c\xcc\xff\x69\xbf\xbe\x3f\xd6\x5b\xb6\x38\x93\x4a\xd0\x80\xa9\x39\x8d\x56\x94\x48\x05\x43\x04\x0a\x8f\x34\x0c\x7c\x68\x75\x2e\x7a\x30\x0c\xb9\xf7\x40\xe0\xf9\x44\xff\x7d\x7c\x3e\x49\xa3\x1d\xc4\x5e\x2b\xf0\xc5\x5f\x7a\xae\x92\x96\x5e\xba\xfc\xb1\xad\xcb\xa6\x51\xc0\x69\x7c\x3a\x5c\x3a\xdd\x64\x18\x06\x5e\x06\xa1\x79\xdb\x58\x8b\x54\xf3\xb6\xb1\x63\x52\xf6\xe9\xef\x42\xca\x5e\x93\x94\xbd\x43\x52\x8d\xdf\x8a\x94\xb3\x26\x29\x67\x87\xa4\xec\x83\x26\xd5\xe2\xcc\x0f\xd2\x35\xba\x08\x5c\x51\x69\x1c\xc6\x8c\xd7\xf1\x25\x23\xe4\x9a\xab\xe3\xec\x67\x5a\x1d\xf4\x50\xfb\xdf\x84\x86\xf2\x98\xc0\x8f\x77\x3d\x1c\x55\x1e\xe4\x0f\x60\x59\xff\x94\x6d\x6f\x6f\xb1\xbd\xfd\xeb\xed\x9d\x2d\xb6\x77\x8c\xed\x7b\x28\x79\x22\xbc\xac\x58\x0e\xba\x2d\x32\x93\x22\xcd\xef\x2e\x21\xed\x96\x4d\x48\x71\x71\x77\x05\x8f\x51\xa8\xa0\xa8\xad\x00\xd3\x0c\x04\xed\x6d\xb6\x24\xe4\x26\x6d\x46\x87\x21\x5e\x30\xe9\x26\x71\xcc\x85\x22\x60\x29\x91\xa0\x65\x4e\x5f\x71\xa9\x18\x8d\x50\x1a\x06\x66\xab\x90\x39\x32\x46\x73\xdb\x3e\xbd\x97\x53\x1c\x7f\xe3\x0b\x81\x6b\x1a\x61\x3e\x02\xa0\x1b\x03\x02\xef\xdc\x64\x08\x7f\xfc\xd4\x02\x5d\x45\xbd\x87\xd4\xe8\x75\xf1\xce\x2e\xa7\x91\x4d\x17\x79\x9a\xe5\x19\x29\x49\xb2\x0a\x64\x83\xd8\xeb\xf8\x05\xae\x1c\xec\x22\xc8\xaa\xa4\xcb\xcd\xbf\xd1\x38\xb3\xe8\xc4\x37\xec\x2b\x4d\x98\x37\x26\x90\x52\xcb\xe7\x9b\x8f\x34\x08\xe9\x30\x08\x03\xf5\x72\xcb\x99\xd6\x8c\x21\x7a\x0a\x7e\x40\xfd\x03\xbc\xfb\x92\xee\x2a\xf3\x0c\xab\x22\x87\xea\x89\x8b\x07\x13\x5e\xe6\x77\x53\xc8\xb5\x58\x2f\xaf\x35\x16\xef\xfd\xad\x68\xdb\x3b\xa4\x6d\xef\x92\x76\xe3\x10\x68\xdb\x8b\xb5\x63\x2b\xda\xce\x0e\x69\x3b\xbb\xa4\x6d\x1f\x02\x6d\x47\xbf\xe0\xa4\xc5\x10\xd5\x17\xaa\xf0\x89\xbe\x94\xd3\x36\x8c\x2a\xa0\xee\x2b\xfc\xac\x02\xac\x14\xf8\xa0\xdb\xca\xe7\x9b\x4a\x51\x6f\x1c\x21\x53\x6b\xa5\x84\xe1\x65\x62\xb1\x48\x24\xd3\xd4\xe3\x89\xc2\x7e\x5a\x29\xca\x03\x9a\xce\xaf\x15\xc6\x9e\x33\x63\x5e\xce\x12\x25\x79\xc3\x15\x23\xf3\xe5\x0d\x23\x25\xcf\xa5\x42\xe6\x94\xc3\x44\xad\x09\x30\xb7\xbc\x40\xa9\x02\x46\xd3\x03\x3e\x73\x3e\xe7\xdf\x3a\x01\x56\x7d\x3e\x93\x42\x35\xf5\xd3\x94\x92\x7b\x81\x76\xb0\xec\xae\x29\x5d\xb0\x71\x71\xcd\xe6\x0d\xed\xf3\x8b\x56\x85\x64\xd4\x84\x3d\x09\xab\xaa\x63\x4b\x85\xd9\x5b\x08\x73\xf6\x24\xac\xaa\x64\x2c\x15\xe6\x6c\x20\x2c\x3f\xc0\x4d\x2f\x2c\x17\x31\x9d\x3f\xf0\xab\xa2\xc3\x86\x3c\x61\x7e\x3b\x1e\x63\x84\x82\x86\x5d\x2e\x94\x29\xb1\xcd\x94\xa8\xb8\xa3\x0d\xa3\x0a\xb1\x53\x2b\x83\xac\x81\x09\xa0\x97\x84\x78\x9d\x44\x43\x14\xe9\x4b\x61\xdd\x29\xfa\xf3\xae\xe0\x8a\x7b\x3c\x24\x60\x7d\xb2\x66\x6c\x9b\x5e\x96\x09\xfa\xfb\x58\xd1\xec\xdf\x0b\x94\x69\x83\x3f\xa2\xa1\x9c\x74\xf8\x4b\xee\x9f\x54\x73\x8f\xb2\x7b\x24\x13\x7a\x97\x82\x47\x3a\x02\xfb\xd4\x9a\x0c\xf6\x79\xea\xfe\xec\xcc\x39\xb3\xa6\xe4\x5c\xf7\xea\x70\x78\x9d\xbe\x09\x2f\x1d\x40\xf1\xc5\xf2\x97\xcc\x6c\xdb\x20\x96\x0d\xe4\xb8\xae\x94\x8a\x0f\x87\xd7\xd9\xff\x9c\x5f\x9f\xeb\x06\xab\x6c\xe0\x26\x51\x1a\xd6\xe1\x80\xaa\x6f\x05\x6a\xf6\x4d\x7b\x23\x4e\x26\xa6\xc9\x21\x34\x6a\xaf\x29\x66\xc5\x62\x53\xba\xe0\x6d\xdb\x83\xd5\x9e\x84\x51\x81\xf7\x2a\x6f\xab\x26\x61\x13\x79\xce\x5e\xe5\x6d\xd5\x2a\xac\x22\xef\x26\x51\x71\xa2\xb2\x6f\x5e\xba\xd8\xe7\xfd\xf6\xcc\xa7\xc6\xfe\x18\x21\xf0\x81\x8f\x40\x8d\x11\x1e\xe3\xac\x9e\x17\x95\x7b\xb6\x35\x68\x3f\xeb\xaf\x5a\x85\x7b\x1a\x55\x97\x76\xed\x6c\xf1\x68\x54\x06\x90\xb5\x02\x20\xb5\x61\xe0\xcf\xfd\xd7\x40\x16\x4a\xee\xf5\x92\x11\xd2\x19\x4d\xdb\x93\x8a\x03\x91\x4e\x2d\x49\xfc\x7c\x52\x47\x7d\xcd\xb5\x83\x75\x15\x2e\x28\x5b\x3c\x29\x6b\xaa\xb5\x37\x50\x6b\x2f\x53\x6b\xbf\x95\x5a\xbb\x44\xad\xb3\xa6\x5a\x67\x03\xb5\xce\x32\xb5\xce\x5b\xa9\x75\x3a\xfe\xd1\x7f\x01\x00\x00\xff\xff\x7b\x24\x36\xe9\xff\x1d\x00\x00")

func assetsVpcYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsVpcYml,
		"assets/vpc.yml",
	)
}

func assetsVpcYml() (*asset, error) {
	bytes, err := assetsVpcYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/vpc.yml", size: 7679, mode: os.FileMode(420), modTime: time.Unix(1484356037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster.yml": assetsClusterYml,
	"assets/vpc.yml": assetsVpcYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"cluster.yml": &bintree{assetsClusterYml, map[string]*bintree{}},
		"vpc.yml": &bintree{assetsVpcYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

