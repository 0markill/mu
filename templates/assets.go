// Code generated by go-bindata.
// sources:
// assets/cluster.yml
// assets/vpc.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xfb\x6f\x13\x39\xfa\xf7\xfe\x15\x1f\x39\x4e\xd9\x5d\x31\x49\x9a\x2e\x2b\x18\x5d\x59\xa5\x69\x80\x88\x14\xa2\xa6\x80\xc4\x43\xc8\x99\xf9\x92\xf8\x98\xb1\xe7\x6c\x4f\xdb\x2c\xd7\xff\xfd\x64\x7b\x1e\x9e\x47\x42\xcb\x72\xb7\xb7\xa7\x0b\xaa\xc8\xd8\x9f\xbf\xf7\xd3\x13\xcf\xf3\x0e\x46\x6f\x17\x17\x18\x27\x11\x51\xf8\x94\x8b\x98\xa8\x37\x28\x24\xe5\xcc\x87\xee\x70\x70\x38\xf0\x06\x8f\xbd\xc1\xe3\xee\xc1\x9c\x08\x12\xa3\x42\x21\xfd\x03\x80\x29\x93\x8a\xb0\x00\x2f\xb6\x09\xea\x67\x00\xf3\x0d\x16\x4a\x50\xb6\x36\x0b\xa7\x28\x03\x41\x13\x65\x50\xe5\xf0\xa0\xb6\x09\x82\xe2\x90\x4a\xec\x65\x60\x2b\x92\x46\xca\x07\x35\xec\xc5\x34\x10\xfc\xc0\x1c\xa5\x02\xc3\x31\x49\x48\x40\xd5\xd6\x25\xf0\x32\x8d\x97\x28\xaa\x27\xbb\x87\xdd\x26\x45\x0b\x08\x7c\x05\x34\xa3\x2d\x35\xdd\x88\xa4\x2c\xd8\x00\x65\xb0\xe5\xa9\x80\xc9\x78\x01\x41\x94\x4a\x65\x70\x9e\x91\xeb\x05\xfd\x0d\xbf\x4a\x6f\xd8\x42\xef\x8c\x5c\xd3\x38\x8d\x81\xb5\xd1\xdd\x10\x05\x01\x61\xb0\xc4\x8c\x01\x0c\x77\xb0\xf0\x02\xb7\x2f\x49\x7c\x2b\x9d\x66\xa0\x5a\x2a\x22\x25\x0f\x28\x51\x08\x57\x54\x6d\xe0\x8a\x8b\xcf\x28\x4a\x06\x7a\x00\x33\x24\x97\x08\xcb\x88\xb0\xcf\xfa\x40\x48\x25\x59\x46\x08\x8b\xc5\x73\x20\x41\x80\x52\xd6\xac\xd1\xd5\x22\x2e\xe4\x66\x14\x45\xfc\xca\x6f\x12\x5f\xa4\x4b\x86\x0a\x56\x82\xc7\x70\xb5\xa1\xc1\xc6\xb0\xa1\x81\x1b\x38\x1b\x52\x9c\x51\x36\x43\xb6\x56\x1b\x1f\xba\x8f\xad\x2a\xcf\xc8\x75\xb1\x74\xf8\xa8\x5b\xe5\x65\xd0\x33\xff\xfa\x03\xb3\x6c\x38\xc2\x70\x4e\x94\x42\xc1\x7c\xe8\xfc\xf0\xe1\x43\xf8\xe5\xf0\xc1\xd1\xcd\x8f\x1f\x3e\xf4\x6e\xf3\xd0\xcf\xbe\x0e\x6f\x7e\xec\x18\x94\x63\xce\xa4\x12\x84\x32\x55\x91\xb1\x1b\xa7\x52\x69\x9b\x11\xb8\x24\x11\x0d\x61\x3c\x3d\x3d\x87\x65\xc4\x83\xcf\x3e\x5c\xf7\xcc\xbf\xfe\x75\xcf\x68\x2a\x20\x11\xbe\x4a\xd5\xc5\x46\xa0\xdc\xf0\x28\x6c\x51\x59\xb1\x07\x44\x65\x3a\x23\x20\xf5\x41\xe0\xa9\x02\xbc\x44\xa6\xe0\x8a\x46\x91\x26\x49\x19\x55\xda\xa0\xe1\xd7\x7c\xf1\xd1\xa0\xa0\x3f\x65\xdf\x48\x9e\xb2\x6f\xa5\x7e\x64\xa8\x4f\x63\xb2\xc6\x69\x1b\x51\xed\xdc\xa3\xb3\x69\x19\x79\xbb\xfc\xda\x75\xbb\x37\x49\x90\x23\xdb\x1f\x01\xc6\xfd\xf9\x0a\xd4\x06\xb5\x85\x52\x13\x0b\x34\x4e\xb8\x50\xb0\xe2\xc2\xac\x1b\x64\x07\x00\xf3\x74\x19\xd1\xc0\xba\xed\xe8\xdd\xe1\xf7\x23\x30\x7a\x77\x08\xd2\x46\x03\x6d\x12\x1a\x7e\x4f\x42\xc3\x0a\xa1\xba\xda\xaa\x84\x8f\xbe\x27\xe1\xa3\x3d\x84\xcf\x50\x91\x90\x28\xa2\xa9\x8d\xde\x2e\x7c\x7f\x1c\xf1\x34\xb4\xa5\x44\x93\xf0\xa7\x4c\xa1\x58\x91\x20\x4b\x6a\x45\x21\x79\x26\x78\x9a\x48\xbb\x08\xe0\xc1\x8c\x2c\x31\xca\x1f\xf5\x27\xcc\xa9\x74\x8a\xf2\x31\xe6\x6c\x45\xd7\xa9\x30\xa8\x3b\x05\x6c\xb5\x38\xe5\x1f\xaf\x52\xa6\x2a\x1b\x59\xee\xac\xac\xe5\xd9\xee\x36\x0c\x8d\x52\xc5\x4d\xd0\x51\xb6\xbe\x2b\x53\xb5\xea\x56\xd9\xcb\x2a\x50\x55\x51\x86\x8f\x02\x49\xb3\xf4\xee\xd0\x55\x5e\x6a\x6d\xe0\xfd\x9a\x33\x56\xa9\x30\xd5\xa3\x2f\x70\xab\x0f\xac\x05\x61\xca\x49\xe3\xf0\x83\xad\x1b\xda\x1f\x18\x67\xf8\x63\x81\xab\x5a\x20\xaa\xc8\xca\x64\xd9\x86\xb3\x40\xd1\x5a\xeb\xab\x98\x32\x10\xb7\x52\x16\xb5\x0d\x02\x9e\x32\x55\x60\xab\x54\xf0\x2a\x96\xbc\x40\xef\xc5\x32\xe6\x2c\xa4\xda\x8c\x46\xdd\xcf\x89\xac\x68\xab\xf3\x94\xf9\xfe\x4b\xae\x3a\xa5\xd3\x9a\xa5\xc9\x3f\x52\x12\xc9\x8e\x0f\xef\xef\x9d\xe3\x2a\xd7\xf0\x03\xe8\x76\x3f\x5a\x2c\xb5\xe4\x73\x27\x6c\x8d\xc4\xb5\x13\xef\xf0\x77\xe0\x1d\xee\xc1\x7b\xf4\x3b\xf0\x1e\xe5\x78\xcf\x51\xf2\x54\x04\x68\x14\x3b\x09\xe4\xd8\x9a\xc0\xcd\x51\x26\x7b\x4c\xc6\x26\x85\xe4\xfd\xd0\x64\xbc\xd0\xb1\x96\x85\x9a\x49\x19\x8d\x23\x0e\x40\xe5\xc1\x40\x67\xf9\x2a\x41\x16\xca\x57\xcc\x87\xf7\x1f\x6d\x70\x09\x9e\xa0\x50\x14\x8b\xb8\x7a\x33\x1f\xbf\xe3\x0c\xa7\x21\x32\x45\x57\x34\x67\x4d\x8b\xa9\xa5\x9c\xae\x4a\xa7\xf2\x5a\x6c\xea\x6c\x1a\x70\x93\x42\xdf\xe8\x8c\xea\xc3\xbd\x45\xba\x84\xfb\x5f\x1a\x96\xbc\x71\x0e\x19\xdd\x19\x71\x5e\x72\x73\xec\x2e\xd4\x87\x77\xa6\x3e\xfc\x8e\xd4\x8f\xee\x4c\xfd\xe8\x76\xd4\x67\x26\x73\x55\xd2\xab\x09\x46\x7b\x60\xcc\x99\x22\x94\xa1\xc8\x33\x9e\xcc\x93\x00\x65\x26\x09\x14\x83\x41\x99\x17\xec\x49\x37\xcb\x36\x33\x90\x85\x69\xcf\xd2\x17\x64\xed\x54\xac\x17\xb8\xb5\x15\xb4\x90\x25\x17\xba\x10\x68\xa1\x48\xf0\xb9\x02\xa2\x3d\x8f\xac\x89\xc2\x91\xb2\xf2\xf9\xa0\x44\x26\xf2\x58\xa0\x91\x72\xce\x23\x1a\x14\xb9\x30\x0f\x9d\x05\x5d\x33\xe2\x14\xa4\x0b\x1a\x23\x4f\x95\x0f\xf3\x8b\xc3\x87\x67\x66\xf9\x75\x12\x12\x85\xd5\xe3\x4e\x44\x9c\xf3\x48\xff\x67\xa1\x4a\x44\x67\x94\x15\x3a\x9c\xb2\x05\x8a\x4b\x1a\x54\xd4\x67\x14\x78\x42\x54\xb0\xa9\x2b\x56\x97\xa9\x54\xa2\x66\xc5\xe5\x43\x7f\xde\x12\xaa\x5e\xb1\x2a\xf3\xd2\x87\xae\x96\xd6\xed\x99\x5d\x6e\x77\x45\x75\xf6\xc5\x82\xee\x08\xe0\x51\xf8\xf7\x54\xaa\x18\x99\xb2\x58\xc6\x1b\xc2\xd6\x38\x65\x35\x13\xd6\x13\x84\xe3\x51\x2d\xc9\x26\x3b\x34\xe6\x3c\x0a\xf9\x15\xf3\xe1\x68\x30\xc8\x8b\x9f\x05\x2b\xc9\xfa\x70\x58\xb6\xe2\xff\x43\x52\x79\x5a\xac\x33\x8c\xb9\xd8\x8e\x22\x22\xe2\xe7\x74\xbd\x69\x08\x66\xba\xbe\xb7\xda\x45\x7c\xdf\x40\xed\x92\x47\xef\x55\x5a\x50\x93\x21\x8c\xd6\x3c\x3d\x07\xd1\x55\x46\x0b\x9e\xc0\xfd\x2f\x8d\xc1\xea\xe6\xaf\xa6\x0f\x79\x08\x31\x65\xa9\x2a\x63\x1e\x95\xa0\x81\x95\xda\x1e\x3f\x47\x89\xe2\xd2\x84\x53\x06\xa3\x77\x65\xa2\x1b\x51\xcd\x72\x7f\x32\x5e\xe4\x32\x2b\xa2\xa8\x54\x34\xf0\x61\x74\x89\x82\xac\xf3\x68\x9d\xa3\xa0\x3c\x74\xd5\x33\xd1\x4d\xb2\x8d\x51\xb3\x27\xad\xd1\x8d\x32\x8a\xe1\xcb\xea\xbd\xc1\xba\xab\x81\x51\x50\x74\x19\x4e\x0e\xac\x86\x44\x9e\x9f\x68\x8c\x4c\x56\xa1\xad\xa0\x59\x99\xdc\x99\x81\xca\x32\x5b\x18\x3c\x4e\x88\xa0\x92\xb3\x57\x09\x0a\xa2\xb8\xf0\xe1\x99\xce\x39\x28\x2e\x36\x84\xb9\x9c\x3a\xf6\x9e\xe5\x0d\xde\xf7\x36\x37\x65\x8e\xb5\xff\x96\x5b\xdb\x19\x63\xff\x64\xc6\x9e\xb2\xbb\xda\x3a\xcf\x13\xff\x19\x53\xcf\x50\xca\xba\x9d\x9b\x55\x74\x7f\xce\x6a\xa9\xc9\x07\x99\x4d\x8a\x31\xd0\x48\xde\x3e\x0a\x52\x55\x96\x9d\xc0\x20\x71\x87\xa3\x80\xc7\x31\x61\x61\x65\x60\x02\x18\x1c\x7e\x22\x61\xf8\x29\x6f\xd6\x3f\x29\xfe\x29\x70\xbb\xc7\xc6\xf9\xcc\xc9\xfe\x59\xdb\x05\xf8\xcb\xbd\xfe\x92\xb2\xfe\x92\xc8\x4d\x63\x0f\x83\x0d\xd7\xb9\xf2\xd3\x78\xf6\x7a\x71\x31\x39\x3f\xbe\xff\xa5\x54\xea\x0d\xc0\x93\x27\xd0\x47\x15\xf4\x31\x90\xfa\xaf\x67\xb9\x77\xd0\xac\x68\x84\x35\xce\x3b\xe6\x44\xb0\x62\xfa\xcf\xdb\xa4\x89\x39\xd5\x69\xb2\xcd\x94\xc9\xb4\x3b\xd8\x7e\x1f\x13\xca\x3e\x36\x96\xa5\xee\x2d\x8e\xef\x7f\x29\x1b\x0d\xb7\xad\xca\x3f\x02\xd7\x94\xb3\x1c\xec\xdc\x3c\xd5\xa1\x62\x1e\xea\xaa\x3e\x18\x0c\x7e\x1e\x0c\xba\xb5\x4d\x7e\xc5\x50\xf8\x20\x38\x57\xb5\x9d\xb5\x69\xc7\x9b\x3b\xa5\xd8\x1b\xce\x3f\xcb\x5e\x68\xc4\x27\xa9\xe2\x9e\xc0\x88\x93\x10\xc5\x37\x2a\xa2\x81\xc7\xd3\x14\x9a\xaa\x51\x82\xae\xd7\x28\xe4\x71\xc2\xa5\xea\xa5\xa6\xdf\x69\x00\x25\x44\x6d\x8e\x8b\xb9\xa4\xd7\x8c\x84\x5e\xee\xd4\xbd\x9d\xde\xdc\x40\x4a\x4c\xb0\x1f\xf7\x79\xa2\xfa\xe4\x4a\x1a\x7f\xd3\x5c\x53\x46\x15\x78\x97\xe0\x79\xc6\x6c\xe0\x9a\x4d\x47\xf5\x0d\x78\x9e\xc8\x78\x69\x09\x4a\xb3\xab\x4d\x07\x7b\x0d\x09\x20\x52\x46\xe4\x71\xcd\x24\xd2\xb6\x74\x35\xef\x94\x5b\x79\x49\x2b\x11\x99\x59\xc1\xfa\x6a\x7d\x19\x00\x19\x59\x46\x18\x3a\x3d\x5c\x7d\x5f\xa6\x02\xcf\x53\xc6\x74\xaa\xd8\x05\xd5\x12\x27\x60\xa7\xc9\xf6\x68\xd9\x0b\xf9\x15\x07\xdb\x51\x95\xf2\x0b\x4b\x9b\x3b\xb3\xa7\xbc\x3e\x60\x90\x0a\xaa\xb6\xd9\xf5\x14\xbc\xb7\x40\xcf\xb9\x54\x8b\x67\x90\xbb\x5a\xe5\x16\x26\x43\xd3\xbc\x6c\x9a\x92\x38\x5f\x9d\x0b\xae\x05\x2f\x7a\xb2\x61\x6d\x23\x3b\x91\xdf\x37\xc0\xbd\xe9\x0a\xde\x3b\x37\x10\x0f\xa0\x7a\xb7\x60\x9e\x3a\xee\xd0\xd4\xc9\x79\x7b\x2d\x51\x9c\x3a\xa9\x18\xcc\x54\x76\x42\x24\xfe\xf2\xb3\xab\xf7\x96\x20\x73\x12\x24\x78\xd7\xd5\x90\xd9\xa6\xb1\xbd\x30\x89\x22\xf0\xb6\x40\xae\xa4\xa7\xb5\xbe\xe4\x5c\x49\x25\x48\x52\x01\xfe\x43\xfc\xbf\x41\x54\x9a\xa1\x03\x3c\x84\xfb\xbf\xde\x8e\x72\x4b\xb3\xbc\x87\x74\xd3\x8c\x8d\xe2\x39\x1d\x9d\xe9\x4c\xd1\xb4\x75\xd3\x2b\xe7\x44\x6d\x7c\xe8\xf4\x73\x8f\x3f\xe7\x4e\xa0\x78\x85\xe3\xe8\x65\x4b\x5b\x7f\x6b\x27\x98\xc1\xb4\x76\x64\x52\xa6\x31\x6a\x00\xdb\x7a\x9c\xf2\x20\x35\x7d\x7e\xa1\x4a\xdd\x21\x61\x75\xc9\x83\xc9\x6a\x85\x81\xf2\xc1\xbd\x22\xb5\x04\x28\x0b\x68\x42\xa2\x6a\x44\xe7\x43\xe4\x41\x35\x70\x31\x18\xf6\x48\x4c\x7e\xe3\x8c\x5c\xe9\x12\x1a\x3b\xfb\xb6\x4d\xaa\xde\x95\x4a\x25\xfd\x92\xe1\x1d\x7a\x32\x72\x50\x57\x55\x56\x32\x1b\x48\x18\x48\x2f\xcb\x7f\xe5\xcc\xba\x43\xf2\x56\xd9\xf7\x49\xdf\xc6\xb5\x95\x53\xfa\x66\x98\xc7\x6a\x57\xe6\xee\x6b\x37\xd2\x5b\x0d\x67\x6f\x81\x3d\x45\x71\x17\x68\x2a\x03\x7e\x89\x62\xce\xa3\x68\xc2\xc2\x84\x53\xa6\x5a\xc0\x16\xe9\x32\xa6\xea\xa7\xc6\x8e\xf0\x9b\x6b\xd2\xd7\xc8\x2a\xcb\x79\xe5\xf4\xa1\xf3\x93\x36\x85\xcd\x90\x2d\x17\x7a\x43\xdf\xaf\x24\xd5\x1d\x8e\xe9\xbc\xf6\x81\x2c\x67\xb5\xdd\x24\x19\xb0\x3c\xee\x0d\xbe\xc6\x1b\x27\xcd\x49\x91\xc7\xc1\x9d\x78\x2b\x7c\x4c\xd9\x5a\xa0\x74\xdc\x66\x9a\xcc\x05\x57\x3c\xe0\x91\x0f\x2a\x28\x13\xda\x53\xc1\xe3\x39\x17\xe6\xd5\xef\xb0\x2c\x68\x17\xbc\x65\x71\x4c\x43\x31\x4d\xf2\xa9\xa0\x7c\xa5\x30\x89\x96\xff\x05\xca\x99\x9d\xfc\x9b\xf4\xf2\x68\xd0\xa2\x17\x77\x31\xd7\x8b\xfb\x32\x77\x32\x3b\x19\x6a\x5b\x9d\xa7\x2d\x79\xac\xa9\x9a\x8c\xaf\x5d\x35\xbd\x95\x49\x87\xc5\x82\x99\x82\xbf\x5f\x1e\x3e\x3c\x7a\x98\xaf\x2e\xec\x35\x55\x85\xa0\xee\x10\x9e\xa1\x1a\x29\x65\xed\xd7\xcb\x96\x5d\x05\xbb\x40\x36\x04\x1c\x28\xbd\x30\x9c\xcc\x4e\xfe\x0c\x12\x36\x98\x6f\x15\xb1\xae\x87\x49\x20\x27\xd1\xb2\x29\x5b\x44\xf4\x8c\x3d\xe3\x24\x3c\x21\x11\x61\x01\x65\xeb\x37\x43\xdf\x2f\x17\xb2\x9c\xd8\x14\xd3\x5e\x12\xcb\xff\x5f\xbf\xff\xd1\xd7\xef\xb5\x4e\xb8\xd6\x88\x68\x3f\x28\xec\x3f\xd3\xb5\x89\xb5\xbd\xce\xd9\xe5\x07\xd9\x81\x1d\x3e\xe0\xba\xc9\x48\xb0\xf2\x92\x63\x12\x2d\x33\x90\xec\x1d\x74\xe3\x72\xc5\x12\x5f\x71\x71\x45\x44\x58\xe6\x24\x22\xd6\xa8\x8c\x24\x75\x7c\x19\x22\x07\xa2\xe8\x2b\x6a\x59\xac\x0c\xbf\xe7\x17\x17\xf3\x42\xf8\x26\x82\x5b\xab\xa1\x4e\xb4\xa5\x29\xcc\x99\xd8\xc3\x06\xdc\xb9\x40\xbc\x4a\x55\x92\xda\x18\xd3\x73\xc1\x6b\x91\xb5\x6f\x2e\xf0\x46\xa9\xc4\xef\xf7\xcd\x35\xc8\x24\x5a\xf6\x4e\x5f\x2e\x4c\xbb\xdc\x3f\x80\xc6\xcf\x3c\x66\x27\xf0\xfa\x7c\xd6\x70\x07\xad\xea\x0a\xde\x52\xeb\x15\x07\xa8\x20\x1b\x09\x96\xff\x22\x41\xe3\xcd\x01\xed\x8f\x89\x26\xd7\x5a\xa6\x5c\xce\x6c\x54\xb2\xa2\xd5\xba\x7a\xaf\xc1\x4a\xcb\x8b\xc7\x3d\x57\x68\x3b\x7f\x26\xe1\xbc\x40\xfe\x16\x9e\x72\x1a\x07\xff\x0a\x00\x00\xff\xff\xf5\x7d\x70\xf8\x7d\x27\x00\x00")

func assetsClusterYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterYml,
		"assets/cluster.yml",
	)
}

func assetsClusterYml() (*asset, error) {
	bytes, err := assetsClusterYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster.yml", size: 10109, mode: os.FileMode(420), modTime: time.Unix(1484675311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsVpcYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x99\x4b\x6f\xdb\x38\x10\xc7\xef\xf9\x14\xd3\x60\x01\x6d\x81\x3a\xb5\xa5\xa4\x68\x78\xf3\x3a\x4e\x63\x6c\x9b\x18\x96\xe1\x02\x69\xf6\x40\x4b\xe3\x58\x88\x44\x6a\x49\x2a\x0f\x14\xf9\xee\x0b\x51\x92\x1f\xb4\xe4\xfa\x15\xaf\x8b\x5c\x6a\x72\xc8\x99\xff\x4f\x43\xce\x48\xad\xd5\x6a\x47\xcd\xef\x6e\x1f\xa3\x38\xa4\x0a\x2f\xb9\x88\xa8\x1a\xa0\x90\x01\x67\x04\x2c\xbb\xde\xa8\xd7\xea\xe7\xb5\xfa\xb9\x75\xd4\xa5\x82\x46\xa8\x50\x48\x72\x04\xd0\x61\x52\x51\xe6\x61\x1f\x19\x65\xde\x4b\x3a\x04\x70\x81\xd2\x13\x41\xac\xf4\xe2\xc2\x02\x54\x66\x02\x8a\x43\x22\x11\x46\x5c\xc0\xa0\xdb\xd2\x0b\xfa\x2f\x31\x12\x70\x95\x08\xd8\xbd\x1e\x68\x86\x21\x7f\x42\x7f\x40\xc3\x04\x65\xb6\x69\x0d\x7c\x1c\xd1\x24\x54\x93\x5f\x7e\xe0\x51\x85\x7e\xee\x52\xcf\x91\x19\x23\x57\x8e\xf5\x36\x25\x31\xb9\xc9\x90\xa1\x82\x91\xe0\x11\x3c\x8d\x03\x6f\x9c\x06\x45\x53\x63\x70\xdd\x2b\xa0\x9e\x87\x52\x9e\x94\x87\xf6\x2d\x60\x5f\x91\xdd\xab\x31\x01\xeb\xdc\xca\x86\xe8\xf3\x64\xa8\xf1\xd9\x9a\x0f\xa8\x7e\xa2\xff\x3e\xd6\x67\x85\x75\xa9\x52\x28\x18\x81\xe3\x3f\xef\xee\xfc\x9f\x8d\x0f\xce\xeb\xfb\xbb\xbb\x93\x55\x7e\x7c\xcc\xff\x69\xbf\xbe\x3f\xd6\x5b\xb6\x38\x93\x4a\xd0\x80\xa9\x39\x8d\x56\x94\x48\x05\x43\x04\x0a\x8f\x34\x0c\x7c\x68\x75\x2e\x7a\x30\x0c\xb9\xf7\x40\xe0\xf9\x44\xff\x7d\x7c\x3e\x49\xa3\x1d\xc4\x5e\x2b\xf0\xc5\x5f\x7a\xae\x92\x96\x5e\xba\xfc\xb1\xad\xcb\xa6\x51\xc0\x69\x7c\x3a\x5c\x3a\xdd\x64\x18\x06\x5e\x06\xa1\x79\xdb\x58\x8b\x54\xf3\xb6\xb1\x63\x52\xf6\xe9\xef\x42\xca\x5e\x93\x94\xbd\x43\x52\x8d\xdf\x8a\x94\xb3\x26\x29\x67\x87\xa4\xec\x83\x26\xd5\xe2\xcc\x0f\xd2\x35\xba\x08\x5c\x51\x69\x1c\xc6\x8c\xd7\xf1\x25\x23\xe4\x9a\xab\xe3\xec\x67\x5a\x1d\xf4\x50\xfb\xdf\x84\x86\xf2\x98\xc0\x8f\x77\x3d\x1c\x55\x1e\xe4\x0f\x60\x59\xff\x94\x6d\x6f\x6f\xb1\xbd\xfd\xeb\xed\x9d\x2d\xb6\x77\x8c\xed\x7b\x28\x79\x22\xbc\xac\x58\x0e\xba\x2d\x32\x93\x22\xcd\xef\x2e\x21\xed\x96\x4d\x48\x71\x71\x77\x05\x8f\x51\xa8\xa0\xa8\xad\x00\xd3\x0c\x04\xed\x6d\xb6\x24\xe4\x26\x6d\x46\x87\x21\x5e\x30\xe9\x26\x71\xcc\x85\x22\x60\x29\x91\xa0\x65\x4e\x5f\x71\xa9\x18\x8d\x50\x1a\x06\x66\xab\x90\x39\x32\x46\x73\xdb\x3e\xbd\x97\x53\x1c\x7f\xe3\x0b\x81\x6b\x1a\x61\x3e\x02\xa0\x1b\x03\x02\xef\xdc\x64\x08\x7f\xfc\xd4\x02\x5d\x45\xbd\x87\xd4\xe8\x75\xf1\xce\x2e\xa7\x91\x4d\x17\x79\x9a\xe5\x19\x29\x49\xb2\x0a\x64\x83\xd8\xeb\xf8\x05\xae\x1c\xec\x22\xc8\xaa\xa4\xcb\xcd\xbf\xd1\x38\xb3\xe8\xc4\x37\xec\x2b\x4d\x98\x37\x26\x90\x52\xcb\xe7\x9b\x8f\x34\x08\xe9\x30\x08\x03\xf5\x72\xcb\x99\xd6\x8c\x21\x7a\x0a\x7e\x40\xfd\x03\xbc\xfb\x92\xee\x2a\xf3\x0c\xab\x22\x87\xea\x89\x8b\x07\x13\x5e\xe6\x77\x53\xc8\xb5\x58\x2f\xaf\x35\x16\xef\xfd\xad\x68\xdb\x3b\xa4\x6d\xef\x92\x76\xe3\x10\x68\xdb\x8b\xb5\x63\x2b\xda\xce\x0e\x69\x3b\xbb\xa4\x6d\x1f\x02\x6d\x47\xbf\xe0\xa4\xc5\x10\xd5\x17\xaa\xf0\x89\xbe\x94\xd3\x36\x8c\x2a\xa0\xee\x2b\xfc\xac\x02\xac\x14\xf8\xa0\xdb\xca\xe7\x9b\x4a\x51\x6f\x1c\x21\x53\x6b\xa5\x84\xe1\x65\x62\xb1\x48\x24\xd3\xd4\xe3\x89\xc2\x7e\x5a\x29\xca\x03\x9a\xce\xaf\x15\xc6\x9e\x33\x63\x5e\xce\x12\x25\x79\xc3\x15\x23\xf3\xe5\x0d\x23\x25\xcf\xa5\x42\xe6\x94\xc3\x44\xad\x09\x30\xb7\xbc\x40\xa9\x02\x46\xd3\x03\x3e\x73\x3e\xe7\xdf\x3a\x01\x56\x7d\x3e\x93\x42\x35\xf5\xd3\x94\x92\x7b\x81\x76\xb0\xec\xae\x29\x5d\xb0\x71\x71\xcd\xe6\x0d\xed\xf3\x8b\x56\x85\x64\xd4\x84\x3d\x09\xab\xaa\x63\x4b\x85\xd9\x5b\x08\x73\xf6\x24\xac\xaa\x64\x2c\x15\xe6\x6c\x20\x2c\x3f\xc0\x4d\x2f\x2c\x17\x31\x9d\x3f\xf0\xab\xa2\xc3\x86\x3c\x61\x7e\x3b\x1e\x63\x84\x82\x86\x5d\x2e\x94\x29\xb1\xcd\x94\xa8\xb8\xa3\x0d\xa3\x0a\xb1\x53\x2b\x83\xac\x81\x09\xa0\x97\x84\x78\x9d\x44\x43\x14\xe9\x4b\x61\xdd\x29\xfa\xf3\xae\xe0\x8a\x7b\x3c\x24\x60\x7d\xb2\x66\x6c\x9b\x5e\x96\x09\xfa\xfb\x58\xd1\xec\xdf\x0b\x94\x69\x83\x3f\xa2\xa1\x9c\x74\xf8\x4b\xee\x9f\x54\x73\x8f\xb2\x7b\x24\x13\x7a\x97\x82\x47\x3a\x02\xfb\xd4\x9a\x0c\xf6\x79\xea\xfe\xec\xcc\x39\xb3\xa6\xe4\x5c\xf7\xea\x70\x78\x9d\xbe\x09\x2f\x1d\x40\xf1\xc5\xf2\x97\xcc\x6c\xdb\x20\x96\x0d\xe4\xb8\xae\x94\x8a\x0f\x87\xd7\xd9\xff\x9c\x5f\x9f\xeb\x06\xab\x6c\xe0\x26\x51\x1a\xd6\xe1\x80\xaa\x6f\x05\x6a\xf6\x4d\x7b\x23\x4e\x26\xa6\xc9\x21\x34\x6a\xaf\x29\x66\xc5\x62\x53\xba\xe0\x6d\xdb\x83\xd5\x9e\x84\x51\x81\xf7\x2a\x6f\xab\x26\x61\x13\x79\xce\x5e\xe5\x6d\xd5\x2a\xac\x22\xef\x26\x51\x71\xa2\xb2\x6f\x5e\xba\xd8\xe7\xfd\xf6\xcc\xa7\xc6\xfe\x18\x21\xf0\x81\x8f\x40\x8d\x11\x1e\xe3\xac\x9e\x17\x95\x7b\xb6\x35\x68\x3f\xeb\xaf\x5a\x85\x7b\x1a\x55\x97\x76\xed\x6c\xf1\x68\x54\x06\x90\xb5\x02\x20\xb5\x61\xe0\xcf\xfd\xd7\x40\x16\x4a\xee\xf5\x92\x11\xd2\x19\x4d\xdb\x93\x8a\x03\x91\x4e\x2d\x49\xfc\x7c\x52\x47\x7d\xcd\xb5\x83\x75\x15\x2e\x28\x5b\x3c\x29\x6b\xaa\xb5\x37\x50\x6b\x2f\x53\x6b\xbf\x95\x5a\xbb\x44\xad\xb3\xa6\x5a\x67\x03\xb5\xce\x32\xb5\xce\x5b\xa9\x75\x3a\xfe\xd1\x7f\x01\x00\x00\xff\xff\x7b\x24\x36\xe9\xff\x1d\x00\x00")

func assetsVpcYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsVpcYml,
		"assets/vpc.yml",
	)
}

func assetsVpcYml() (*asset, error) {
	bytes, err := assetsVpcYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/vpc.yml", size: 7679, mode: os.FileMode(420), modTime: time.Unix(1484356037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster.yml": assetsClusterYml,
	"assets/vpc.yml":     assetsVpcYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"cluster.yml": &bintree{assetsClusterYml, map[string]*bintree{}},
		"vpc.yml":     &bintree{assetsVpcYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
